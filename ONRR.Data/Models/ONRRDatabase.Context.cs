//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QEP.ONRR.Data.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ONRRDatabaseEntities : DbContext
    {
        public ONRRDatabaseEntities()
            : base("name=ONRRDatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<LeasesSelectAll_Result> LeasesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeasesSelectAll_Result>("LeasesSelectAll");
        }
    
        public virtual int LeasesDelete(Nullable<int> leaseID)
        {
            var leaseIDParameter = leaseID.HasValue ?
                new ObjectParameter("LeaseID", leaseID) :
                new ObjectParameter("LeaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeasesDelete", leaseIDParameter);
        }
    
        public virtual int LeasesInsert(string oNRRLeaseID, string bLMSerialNumber, string qEPLeaseID, string qEPLeaseName, Nullable<int> leaseClassificationID, Nullable<int> bIAClassificationID, Nullable<System.DateTime> qEPEffectiveDate, string stateCode, string county, Nullable<decimal> royaltyRate, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo, Nullable<int> companyID, ObjectParameter newID)
        {
            var oNRRLeaseIDParameter = oNRRLeaseID != null ?
                new ObjectParameter("ONRRLeaseID", oNRRLeaseID) :
                new ObjectParameter("ONRRLeaseID", typeof(string));
    
            var bLMSerialNumberParameter = bLMSerialNumber != null ?
                new ObjectParameter("BLMSerialNumber", bLMSerialNumber) :
                new ObjectParameter("BLMSerialNumber", typeof(string));
    
            var qEPLeaseIDParameter = qEPLeaseID != null ?
                new ObjectParameter("QEPLeaseID", qEPLeaseID) :
                new ObjectParameter("QEPLeaseID", typeof(string));
    
            var qEPLeaseNameParameter = qEPLeaseName != null ?
                new ObjectParameter("QEPLeaseName", qEPLeaseName) :
                new ObjectParameter("QEPLeaseName", typeof(string));
    
            var leaseClassificationIDParameter = leaseClassificationID.HasValue ?
                new ObjectParameter("LeaseClassificationID", leaseClassificationID) :
                new ObjectParameter("LeaseClassificationID", typeof(int));
    
            var bIAClassificationIDParameter = bIAClassificationID.HasValue ?
                new ObjectParameter("BIAClassificationID", bIAClassificationID) :
                new ObjectParameter("BIAClassificationID", typeof(int));
    
            var qEPEffectiveDateParameter = qEPEffectiveDate.HasValue ?
                new ObjectParameter("QEPEffectiveDate", qEPEffectiveDate) :
                new ObjectParameter("QEPEffectiveDate", typeof(System.DateTime));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(string));
    
            var royaltyRateParameter = royaltyRate.HasValue ?
                new ObjectParameter("RoyaltyRate", royaltyRate) :
                new ObjectParameter("RoyaltyRate", typeof(decimal));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeasesInsert", oNRRLeaseIDParameter, bLMSerialNumberParameter, qEPLeaseIDParameter, qEPLeaseNameParameter, leaseClassificationIDParameter, bIAClassificationIDParameter, qEPEffectiveDateParameter, stateCodeParameter, countyParameter, royaltyRateParameter, effectiveFromParameter, effectiveToParameter, companyIDParameter, newID);
        }
    
        public virtual int LeasesUpdate(Nullable<int> leaseID, string oNRRLeaseID, string bLMSerialNumber, string qEPLeaseID, string qEPLeaseName, Nullable<int> leaseClassificationID, Nullable<int> bIAClassificationID, Nullable<System.DateTime> qEPEffectiveDate, string stateCode, string county, Nullable<decimal> royaltyRate, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo, Nullable<int> companyID)
        {
            var leaseIDParameter = leaseID.HasValue ?
                new ObjectParameter("LeaseID", leaseID) :
                new ObjectParameter("LeaseID", typeof(int));
    
            var oNRRLeaseIDParameter = oNRRLeaseID != null ?
                new ObjectParameter("ONRRLeaseID", oNRRLeaseID) :
                new ObjectParameter("ONRRLeaseID", typeof(string));
    
            var bLMSerialNumberParameter = bLMSerialNumber != null ?
                new ObjectParameter("BLMSerialNumber", bLMSerialNumber) :
                new ObjectParameter("BLMSerialNumber", typeof(string));
    
            var qEPLeaseIDParameter = qEPLeaseID != null ?
                new ObjectParameter("QEPLeaseID", qEPLeaseID) :
                new ObjectParameter("QEPLeaseID", typeof(string));
    
            var qEPLeaseNameParameter = qEPLeaseName != null ?
                new ObjectParameter("QEPLeaseName", qEPLeaseName) :
                new ObjectParameter("QEPLeaseName", typeof(string));
    
            var leaseClassificationIDParameter = leaseClassificationID.HasValue ?
                new ObjectParameter("LeaseClassificationID", leaseClassificationID) :
                new ObjectParameter("LeaseClassificationID", typeof(int));
    
            var bIAClassificationIDParameter = bIAClassificationID.HasValue ?
                new ObjectParameter("BIAClassificationID", bIAClassificationID) :
                new ObjectParameter("BIAClassificationID", typeof(int));
    
            var qEPEffectiveDateParameter = qEPEffectiveDate.HasValue ?
                new ObjectParameter("QEPEffectiveDate", qEPEffectiveDate) :
                new ObjectParameter("QEPEffectiveDate", typeof(System.DateTime));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(string));
    
            var royaltyRateParameter = royaltyRate.HasValue ?
                new ObjectParameter("RoyaltyRate", royaltyRate) :
                new ObjectParameter("RoyaltyRate", typeof(decimal));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeasesUpdate", leaseIDParameter, oNRRLeaseIDParameter, bLMSerialNumberParameter, qEPLeaseIDParameter, qEPLeaseNameParameter, leaseClassificationIDParameter, bIAClassificationIDParameter, qEPEffectiveDateParameter, stateCodeParameter, countyParameter, royaltyRateParameter, effectiveFromParameter, effectiveToParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<LeasesSelect_Result> LeasesSelect(Nullable<int> leaseID)
        {
            var leaseIDParameter = leaseID.HasValue ?
                new ObjectParameter("LeaseID", leaseID) :
                new ObjectParameter("LeaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeasesSelect_Result>("LeasesSelect", leaseIDParameter);
        }
    
        public virtual ObjectResult<LeaseAgreementSelect_Result> LeaseAgreementSelect(Nullable<int> leaseID)
        {
            var leaseIDParameter = leaseID.HasValue ?
                new ObjectParameter("LeaseID", leaseID) :
                new ObjectParameter("LeaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaseAgreementSelect_Result>("LeaseAgreementSelect", leaseIDParameter);
        }
    
        public virtual ObjectResult<AgreementsSelectAll_Result> AgreementsSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgreementsSelectAll_Result>("AgreementsSelectAll");
        }
    
        public virtual ObjectResult<AgreementClassificationsSelectAll_Result> AgreementClassificationsSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgreementClassificationsSelectAll_Result>("AgreementClassificationsSelectAll");
        }
    
        public virtual ObjectResult<AgreementTypesSelectAll_Result> AgreementTypesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgreementTypesSelectAll_Result>("AgreementTypesSelectAll");
        }
    
        public virtual ObjectResult<BIAClassificationsSelectAll_Result> BIAClassificationsSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BIAClassificationsSelectAll_Result>("BIAClassificationsSelectAll");
        }
    
        public virtual ObjectResult<StatesSelectAll_Result> StatesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StatesSelectAll_Result>("StatesSelectAll");
        }
    
        public virtual int LeaseAgreementsDelete(Nullable<int> leaseAgreementID)
        {
            var leaseAgreementIDParameter = leaseAgreementID.HasValue ?
                new ObjectParameter("LeaseAgreementID", leaseAgreementID) :
                new ObjectParameter("LeaseAgreementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeaseAgreementsDelete", leaseAgreementIDParameter);
        }
    
        public virtual int LeaseAgreementsInsert(Nullable<int> leaseID, Nullable<int> agreementID, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo, Nullable<decimal> tractFactor, Nullable<decimal> overrideTractFactor, Nullable<decimal> marketShare, Nullable<decimal> tractAcreage, ObjectParameter newID)
        {
            var leaseIDParameter = leaseID.HasValue ?
                new ObjectParameter("LeaseID", leaseID) :
                new ObjectParameter("LeaseID", typeof(int));
    
            var agreementIDParameter = agreementID.HasValue ?
                new ObjectParameter("AgreementID", agreementID) :
                new ObjectParameter("AgreementID", typeof(int));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            var tractFactorParameter = tractFactor.HasValue ?
                new ObjectParameter("TractFactor", tractFactor) :
                new ObjectParameter("TractFactor", typeof(decimal));
    
            var overrideTractFactorParameter = overrideTractFactor.HasValue ?
                new ObjectParameter("OverrideTractFactor", overrideTractFactor) :
                new ObjectParameter("OverrideTractFactor", typeof(decimal));
    
            var marketShareParameter = marketShare.HasValue ?
                new ObjectParameter("MarketShare", marketShare) :
                new ObjectParameter("MarketShare", typeof(decimal));
    
            var tractAcreageParameter = tractAcreage.HasValue ?
                new ObjectParameter("TractAcreage", tractAcreage) :
                new ObjectParameter("TractAcreage", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeaseAgreementsInsert", leaseIDParameter, agreementIDParameter, effectiveFromParameter, effectiveToParameter, tractFactorParameter, overrideTractFactorParameter, marketShareParameter, tractAcreageParameter, newID);
        }
    
        public virtual int LeaseAgreementsUpdate(Nullable<int> leaseAgreementID, Nullable<int> leaseID, Nullable<int> agreementID, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo, Nullable<decimal> tractFactor, Nullable<decimal> overrideTractFactor, Nullable<decimal> marketShare, Nullable<decimal> tractAcreage)
        {
            var leaseAgreementIDParameter = leaseAgreementID.HasValue ?
                new ObjectParameter("LeaseAgreementID", leaseAgreementID) :
                new ObjectParameter("LeaseAgreementID", typeof(int));
    
            var leaseIDParameter = leaseID.HasValue ?
                new ObjectParameter("LeaseID", leaseID) :
                new ObjectParameter("LeaseID", typeof(int));
    
            var agreementIDParameter = agreementID.HasValue ?
                new ObjectParameter("AgreementID", agreementID) :
                new ObjectParameter("AgreementID", typeof(int));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            var tractFactorParameter = tractFactor.HasValue ?
                new ObjectParameter("TractFactor", tractFactor) :
                new ObjectParameter("TractFactor", typeof(decimal));
    
            var overrideTractFactorParameter = overrideTractFactor.HasValue ?
                new ObjectParameter("OverrideTractFactor", overrideTractFactor) :
                new ObjectParameter("OverrideTractFactor", typeof(decimal));
    
            var marketShareParameter = marketShare.HasValue ?
                new ObjectParameter("MarketShare", marketShare) :
                new ObjectParameter("MarketShare", typeof(decimal));
    
            var tractAcreageParameter = tractAcreage.HasValue ?
                new ObjectParameter("TractAcreage", tractAcreage) :
                new ObjectParameter("TractAcreage", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeaseAgreementsUpdate", leaseAgreementIDParameter, leaseIDParameter, agreementIDParameter, effectiveFromParameter, effectiveToParameter, tractFactorParameter, overrideTractFactorParameter, marketShareParameter, tractAcreageParameter);
        }
    
        public virtual int AccountingMonthInsert(Nullable<System.DateTime> openDate, Nullable<System.DateTime> closeDate, ObjectParameter newID)
        {
            var openDateParameter = openDate.HasValue ?
                new ObjectParameter("OpenDate", openDate) :
                new ObjectParameter("OpenDate", typeof(System.DateTime));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountingMonthInsert", openDateParameter, closeDateParameter, newID);
        }
    
        public virtual ObjectResult<AccountingMonthSelect_Result> AccountingMonthSelect(Nullable<System.DateTime> accountingMonth)
        {
            var accountingMonthParameter = accountingMonth.HasValue ?
                new ObjectParameter("AccountingMonth", accountingMonth) :
                new ObjectParameter("AccountingMonth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountingMonthSelect_Result>("AccountingMonthSelect", accountingMonthParameter);
        }
    
        public virtual ObjectResult<AccountingMonthSelectAll_Result> AccountingMonthSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountingMonthSelectAll_Result>("AccountingMonthSelectAll");
        }
    
        public virtual int AccountingMonthUpdate(Nullable<System.DateTime> accountingMonth, Nullable<System.DateTime> openDate, Nullable<System.DateTime> closeDate)
        {
            var accountingMonthParameter = accountingMonth.HasValue ?
                new ObjectParameter("AccountingMonth", accountingMonth) :
                new ObjectParameter("AccountingMonth", typeof(System.DateTime));
    
            var openDateParameter = openDate.HasValue ?
                new ObjectParameter("OpenDate", openDate) :
                new ObjectParameter("OpenDate", typeof(System.DateTime));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountingMonthUpdate", accountingMonthParameter, openDateParameter, closeDateParameter);
        }
    
        public virtual int AdjustmentReasonCodesInsert(string adjustmentReasonCode, string adjustmentReason, ObjectParameter newID)
        {
            var adjustmentReasonCodeParameter = adjustmentReasonCode != null ?
                new ObjectParameter("AdjustmentReasonCode", adjustmentReasonCode) :
                new ObjectParameter("AdjustmentReasonCode", typeof(string));
    
            var adjustmentReasonParameter = adjustmentReason != null ?
                new ObjectParameter("AdjustmentReason", adjustmentReason) :
                new ObjectParameter("AdjustmentReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdjustmentReasonCodesInsert", adjustmentReasonCodeParameter, adjustmentReasonParameter, newID);
        }
    
        public virtual ObjectResult<AdjustmentReasonCodesSelect_Result> AdjustmentReasonCodesSelect(Nullable<int> adjustmentReasonCodeID)
        {
            var adjustmentReasonCodeIDParameter = adjustmentReasonCodeID.HasValue ?
                new ObjectParameter("AdjustmentReasonCodeID", adjustmentReasonCodeID) :
                new ObjectParameter("AdjustmentReasonCodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdjustmentReasonCodesSelect_Result>("AdjustmentReasonCodesSelect", adjustmentReasonCodeIDParameter);
        }
    
        public virtual ObjectResult<AdjustmentReasonCodesSelectAll_Result> AdjustmentReasonCodesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdjustmentReasonCodesSelectAll_Result>("AdjustmentReasonCodesSelectAll");
        }
    
        public virtual int AdjustmentReasonCodesUpdate(Nullable<int> adjustmentReasonCodeID, string adjustmentReasonCode, string adjustmentReason)
        {
            var adjustmentReasonCodeIDParameter = adjustmentReasonCodeID.HasValue ?
                new ObjectParameter("AdjustmentReasonCodeID", adjustmentReasonCodeID) :
                new ObjectParameter("AdjustmentReasonCodeID", typeof(int));
    
            var adjustmentReasonCodeParameter = adjustmentReasonCode != null ?
                new ObjectParameter("AdjustmentReasonCode", adjustmentReasonCode) :
                new ObjectParameter("AdjustmentReasonCode", typeof(string));
    
            var adjustmentReasonParameter = adjustmentReason != null ?
                new ObjectParameter("AdjustmentReason", adjustmentReason) :
                new ObjectParameter("AdjustmentReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdjustmentReasonCodesUpdate", adjustmentReasonCodeIDParameter, adjustmentReasonCodeParameter, adjustmentReasonParameter);
        }
    
        public virtual int AgreementClassificationsInsert(string agreementClassification, ObjectParameter newID)
        {
            var agreementClassificationParameter = agreementClassification != null ?
                new ObjectParameter("AgreementClassification", agreementClassification) :
                new ObjectParameter("AgreementClassification", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgreementClassificationsInsert", agreementClassificationParameter, newID);
        }
    
        public virtual ObjectResult<AgreementClassificationsSelect_Result> AgreementClassificationsSelect(Nullable<int> agreementClassificationID)
        {
            var agreementClassificationIDParameter = agreementClassificationID.HasValue ?
                new ObjectParameter("AgreementClassificationID", agreementClassificationID) :
                new ObjectParameter("AgreementClassificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgreementClassificationsSelect_Result>("AgreementClassificationsSelect", agreementClassificationIDParameter);
        }
    
        public virtual int AgreementClassificationsUpdate(Nullable<int> agreementClassificationID, string agreementClassification)
        {
            var agreementClassificationIDParameter = agreementClassificationID.HasValue ?
                new ObjectParameter("AgreementClassificationID", agreementClassificationID) :
                new ObjectParameter("AgreementClassificationID", typeof(int));
    
            var agreementClassificationParameter = agreementClassification != null ?
                new ObjectParameter("AgreementClassification", agreementClassification) :
                new ObjectParameter("AgreementClassification", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgreementClassificationsUpdate", agreementClassificationIDParameter, agreementClassificationParameter);
        }
    
        public virtual int AgreementsInsert(string oNRRAgreementID, string bLMSerialNumber, string oNRRAgreementDescription, string formation, Nullable<int> agreementClassificationID, Nullable<int> agreementTypeID, Nullable<decimal> totalAcreage, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo, Nullable<int> companyID, ObjectParameter newID)
        {
            var oNRRAgreementIDParameter = oNRRAgreementID != null ?
                new ObjectParameter("ONRRAgreementID", oNRRAgreementID) :
                new ObjectParameter("ONRRAgreementID", typeof(string));
    
            var bLMSerialNumberParameter = bLMSerialNumber != null ?
                new ObjectParameter("BLMSerialNumber", bLMSerialNumber) :
                new ObjectParameter("BLMSerialNumber", typeof(string));
    
            var oNRRAgreementDescriptionParameter = oNRRAgreementDescription != null ?
                new ObjectParameter("ONRRAgreementDescription", oNRRAgreementDescription) :
                new ObjectParameter("ONRRAgreementDescription", typeof(string));
    
            var formationParameter = formation != null ?
                new ObjectParameter("Formation", formation) :
                new ObjectParameter("Formation", typeof(string));
    
            var agreementClassificationIDParameter = agreementClassificationID.HasValue ?
                new ObjectParameter("AgreementClassificationID", agreementClassificationID) :
                new ObjectParameter("AgreementClassificationID", typeof(int));
    
            var agreementTypeIDParameter = agreementTypeID.HasValue ?
                new ObjectParameter("AgreementTypeID", agreementTypeID) :
                new ObjectParameter("AgreementTypeID", typeof(int));
    
            var totalAcreageParameter = totalAcreage.HasValue ?
                new ObjectParameter("TotalAcreage", totalAcreage) :
                new ObjectParameter("TotalAcreage", typeof(decimal));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgreementsInsert", oNRRAgreementIDParameter, bLMSerialNumberParameter, oNRRAgreementDescriptionParameter, formationParameter, agreementClassificationIDParameter, agreementTypeIDParameter, totalAcreageParameter, effectiveFromParameter, effectiveToParameter, companyIDParameter, newID);
        }
    
        public virtual ObjectResult<AgreementsSelect_Result> AgreementsSelect(Nullable<int> agreementID)
        {
            var agreementIDParameter = agreementID.HasValue ?
                new ObjectParameter("AgreementID", agreementID) :
                new ObjectParameter("AgreementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgreementsSelect_Result>("AgreementsSelect", agreementIDParameter);
        }
    
        public virtual int AgreementsUpdate(Nullable<int> agreementID, string oNRRAgreementID, string bLMSerialNumber, string oNRRAgreementDescription, string formation, Nullable<int> agreementClassificationID, Nullable<int> agreementTypeID, Nullable<decimal> totalAcreage, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo, Nullable<int> companyID)
        {
            var agreementIDParameter = agreementID.HasValue ?
                new ObjectParameter("AgreementID", agreementID) :
                new ObjectParameter("AgreementID", typeof(int));
    
            var oNRRAgreementIDParameter = oNRRAgreementID != null ?
                new ObjectParameter("ONRRAgreementID", oNRRAgreementID) :
                new ObjectParameter("ONRRAgreementID", typeof(string));
    
            var bLMSerialNumberParameter = bLMSerialNumber != null ?
                new ObjectParameter("BLMSerialNumber", bLMSerialNumber) :
                new ObjectParameter("BLMSerialNumber", typeof(string));
    
            var oNRRAgreementDescriptionParameter = oNRRAgreementDescription != null ?
                new ObjectParameter("ONRRAgreementDescription", oNRRAgreementDescription) :
                new ObjectParameter("ONRRAgreementDescription", typeof(string));
    
            var formationParameter = formation != null ?
                new ObjectParameter("Formation", formation) :
                new ObjectParameter("Formation", typeof(string));
    
            var agreementClassificationIDParameter = agreementClassificationID.HasValue ?
                new ObjectParameter("AgreementClassificationID", agreementClassificationID) :
                new ObjectParameter("AgreementClassificationID", typeof(int));
    
            var agreementTypeIDParameter = agreementTypeID.HasValue ?
                new ObjectParameter("AgreementTypeID", agreementTypeID) :
                new ObjectParameter("AgreementTypeID", typeof(int));
    
            var totalAcreageParameter = totalAcreage.HasValue ?
                new ObjectParameter("TotalAcreage", totalAcreage) :
                new ObjectParameter("TotalAcreage", typeof(decimal));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgreementsUpdate", agreementIDParameter, oNRRAgreementIDParameter, bLMSerialNumberParameter, oNRRAgreementDescriptionParameter, formationParameter, agreementClassificationIDParameter, agreementTypeIDParameter, totalAcreageParameter, effectiveFromParameter, effectiveToParameter, companyIDParameter);
        }
    
        public virtual int AgreementTypesInsert(string agreementType, ObjectParameter newID)
        {
            var agreementTypeParameter = agreementType != null ?
                new ObjectParameter("AgreementType", agreementType) :
                new ObjectParameter("AgreementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgreementTypesInsert", agreementTypeParameter, newID);
        }
    
        public virtual ObjectResult<AgreementTypesSelect_Result> AgreementTypesSelect(Nullable<int> agreementTypeID)
        {
            var agreementTypeIDParameter = agreementTypeID.HasValue ?
                new ObjectParameter("AgreementTypeID", agreementTypeID) :
                new ObjectParameter("AgreementTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgreementTypesSelect_Result>("AgreementTypesSelect", agreementTypeIDParameter);
        }
    
        public virtual int AgreementTypesUpdate(Nullable<int> agreementTypeID, string agreementType)
        {
            var agreementTypeIDParameter = agreementTypeID.HasValue ?
                new ObjectParameter("AgreementTypeID", agreementTypeID) :
                new ObjectParameter("AgreementTypeID", typeof(int));
    
            var agreementTypeParameter = agreementType != null ?
                new ObjectParameter("AgreementType", agreementType) :
                new ObjectParameter("AgreementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgreementTypesUpdate", agreementTypeIDParameter, agreementTypeParameter);
        }
    
        public virtual int BIAClassificationsInsert(string bIAClassification, ObjectParameter newID)
        {
            var bIAClassificationParameter = bIAClassification != null ?
                new ObjectParameter("BIAClassification", bIAClassification) :
                new ObjectParameter("BIAClassification", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BIAClassificationsInsert", bIAClassificationParameter, newID);
        }
    
        public virtual ObjectResult<BIAClassificationsSelect_Result> BIAClassificationsSelect(Nullable<int> bIAClassificationID)
        {
            var bIAClassificationIDParameter = bIAClassificationID.HasValue ?
                new ObjectParameter("BIAClassificationID", bIAClassificationID) :
                new ObjectParameter("BIAClassificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BIAClassificationsSelect_Result>("BIAClassificationsSelect", bIAClassificationIDParameter);
        }
    
        public virtual int BIAClassificationsUpdate(Nullable<int> bIAClassificationID, string bIAClassification)
        {
            var bIAClassificationIDParameter = bIAClassificationID.HasValue ?
                new ObjectParameter("BIAClassificationID", bIAClassificationID) :
                new ObjectParameter("BIAClassificationID", typeof(int));
    
            var bIAClassificationParameter = bIAClassification != null ?
                new ObjectParameter("BIAClassification", bIAClassification) :
                new ObjectParameter("BIAClassification", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BIAClassificationsUpdate", bIAClassificationIDParameter, bIAClassificationParameter);
        }
    
        public virtual int CompanyPayorCodesInsert(string qRACompanyCode, string companyName, string oNRRPayorCode, ObjectParameter newID)
        {
            var qRACompanyCodeParameter = qRACompanyCode != null ?
                new ObjectParameter("QRACompanyCode", qRACompanyCode) :
                new ObjectParameter("QRACompanyCode", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var oNRRPayorCodeParameter = oNRRPayorCode != null ?
                new ObjectParameter("ONRRPayorCode", oNRRPayorCode) :
                new ObjectParameter("ONRRPayorCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyPayorCodesInsert", qRACompanyCodeParameter, companyNameParameter, oNRRPayorCodeParameter, newID);
        }
    
        public virtual ObjectResult<CompanyPayorCodesSelect_Result> CompanyPayorCodesSelect(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyPayorCodesSelect_Result>("CompanyPayorCodesSelect", companyIDParameter);
        }
    
        public virtual ObjectResult<CompanyPayorCodesSelectAll_Result> CompanyPayorCodesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyPayorCodesSelectAll_Result>("CompanyPayorCodesSelectAll");
        }
    
        public virtual int CompanyPayorCodesUpdate(Nullable<int> companyID, string qRACompanyCode, string companyName, string oNRRPayorCode)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var qRACompanyCodeParameter = qRACompanyCode != null ?
                new ObjectParameter("QRACompanyCode", qRACompanyCode) :
                new ObjectParameter("QRACompanyCode", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var oNRRPayorCodeParameter = oNRRPayorCode != null ?
                new ObjectParameter("ONRRPayorCode", oNRRPayorCode) :
                new ObjectParameter("ONRRPayorCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyPayorCodesUpdate", companyIDParameter, qRACompanyCodeParameter, companyNameParameter, oNRRPayorCodeParameter);
        }
    
        public virtual int JTRN_SL_DETAILInsert(string oPER_BUS_SEG_CD, Nullable<System.DateTime> aCCTG_MTH, string aCCT_NO, Nullable<decimal> tRANS_VAL_AMT, Nullable<decimal> tRANS_QTY, Nullable<decimal> bTU_FACT, Nullable<decimal> gRS_AMT, Nullable<decimal> gRS_QTY, string mAJ_PROD_CD, string pROD_CD, string oWNR_BA_NO, Nullable<decimal> oWNR_INT_DEC, string cTR_PTY_NO, string pROP_NO, string dO_TYPE_CD, string dO_MAJ_PROD_CD, Nullable<int> tIER, string pPN_RSN_CD, Nullable<System.DateTime> pRDN_DT, string sT_CD, Nullable<decimal> mMBTU_OWNR_VOL, string wELL_NO, string cOMPL_NO, string dISP_CD, Nullable<decimal> nET_VOL, ObjectParameter newID)
        {
            var oPER_BUS_SEG_CDParameter = oPER_BUS_SEG_CD != null ?
                new ObjectParameter("OPER_BUS_SEG_CD", oPER_BUS_SEG_CD) :
                new ObjectParameter("OPER_BUS_SEG_CD", typeof(string));
    
            var aCCTG_MTHParameter = aCCTG_MTH.HasValue ?
                new ObjectParameter("ACCTG_MTH", aCCTG_MTH) :
                new ObjectParameter("ACCTG_MTH", typeof(System.DateTime));
    
            var aCCT_NOParameter = aCCT_NO != null ?
                new ObjectParameter("ACCT_NO", aCCT_NO) :
                new ObjectParameter("ACCT_NO", typeof(string));
    
            var tRANS_VAL_AMTParameter = tRANS_VAL_AMT.HasValue ?
                new ObjectParameter("TRANS_VAL_AMT", tRANS_VAL_AMT) :
                new ObjectParameter("TRANS_VAL_AMT", typeof(decimal));
    
            var tRANS_QTYParameter = tRANS_QTY.HasValue ?
                new ObjectParameter("TRANS_QTY", tRANS_QTY) :
                new ObjectParameter("TRANS_QTY", typeof(decimal));
    
            var bTU_FACTParameter = bTU_FACT.HasValue ?
                new ObjectParameter("BTU_FACT", bTU_FACT) :
                new ObjectParameter("BTU_FACT", typeof(decimal));
    
            var gRS_AMTParameter = gRS_AMT.HasValue ?
                new ObjectParameter("GRS_AMT", gRS_AMT) :
                new ObjectParameter("GRS_AMT", typeof(decimal));
    
            var gRS_QTYParameter = gRS_QTY.HasValue ?
                new ObjectParameter("GRS_QTY", gRS_QTY) :
                new ObjectParameter("GRS_QTY", typeof(decimal));
    
            var mAJ_PROD_CDParameter = mAJ_PROD_CD != null ?
                new ObjectParameter("MAJ_PROD_CD", mAJ_PROD_CD) :
                new ObjectParameter("MAJ_PROD_CD", typeof(string));
    
            var pROD_CDParameter = pROD_CD != null ?
                new ObjectParameter("PROD_CD", pROD_CD) :
                new ObjectParameter("PROD_CD", typeof(string));
    
            var oWNR_BA_NOParameter = oWNR_BA_NO != null ?
                new ObjectParameter("OWNR_BA_NO", oWNR_BA_NO) :
                new ObjectParameter("OWNR_BA_NO", typeof(string));
    
            var oWNR_INT_DECParameter = oWNR_INT_DEC.HasValue ?
                new ObjectParameter("OWNR_INT_DEC", oWNR_INT_DEC) :
                new ObjectParameter("OWNR_INT_DEC", typeof(decimal));
    
            var cTR_PTY_NOParameter = cTR_PTY_NO != null ?
                new ObjectParameter("CTR_PTY_NO", cTR_PTY_NO) :
                new ObjectParameter("CTR_PTY_NO", typeof(string));
    
            var pROP_NOParameter = pROP_NO != null ?
                new ObjectParameter("PROP_NO", pROP_NO) :
                new ObjectParameter("PROP_NO", typeof(string));
    
            var dO_TYPE_CDParameter = dO_TYPE_CD != null ?
                new ObjectParameter("DO_TYPE_CD", dO_TYPE_CD) :
                new ObjectParameter("DO_TYPE_CD", typeof(string));
    
            var dO_MAJ_PROD_CDParameter = dO_MAJ_PROD_CD != null ?
                new ObjectParameter("DO_MAJ_PROD_CD", dO_MAJ_PROD_CD) :
                new ObjectParameter("DO_MAJ_PROD_CD", typeof(string));
    
            var tIERParameter = tIER.HasValue ?
                new ObjectParameter("TIER", tIER) :
                new ObjectParameter("TIER", typeof(int));
    
            var pPN_RSN_CDParameter = pPN_RSN_CD != null ?
                new ObjectParameter("PPN_RSN_CD", pPN_RSN_CD) :
                new ObjectParameter("PPN_RSN_CD", typeof(string));
    
            var pRDN_DTParameter = pRDN_DT.HasValue ?
                new ObjectParameter("PRDN_DT", pRDN_DT) :
                new ObjectParameter("PRDN_DT", typeof(System.DateTime));
    
            var sT_CDParameter = sT_CD != null ?
                new ObjectParameter("ST_CD", sT_CD) :
                new ObjectParameter("ST_CD", typeof(string));
    
            var mMBTU_OWNR_VOLParameter = mMBTU_OWNR_VOL.HasValue ?
                new ObjectParameter("MMBTU_OWNR_VOL", mMBTU_OWNR_VOL) :
                new ObjectParameter("MMBTU_OWNR_VOL", typeof(decimal));
    
            var wELL_NOParameter = wELL_NO != null ?
                new ObjectParameter("WELL_NO", wELL_NO) :
                new ObjectParameter("WELL_NO", typeof(string));
    
            var cOMPL_NOParameter = cOMPL_NO != null ?
                new ObjectParameter("COMPL_NO", cOMPL_NO) :
                new ObjectParameter("COMPL_NO", typeof(string));
    
            var dISP_CDParameter = dISP_CD != null ?
                new ObjectParameter("DISP_CD", dISP_CD) :
                new ObjectParameter("DISP_CD", typeof(string));
    
            var nET_VOLParameter = nET_VOL.HasValue ?
                new ObjectParameter("NET_VOL", nET_VOL) :
                new ObjectParameter("NET_VOL", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JTRN_SL_DETAILInsert", oPER_BUS_SEG_CDParameter, aCCTG_MTHParameter, aCCT_NOParameter, tRANS_VAL_AMTParameter, tRANS_QTYParameter, bTU_FACTParameter, gRS_AMTParameter, gRS_QTYParameter, mAJ_PROD_CDParameter, pROD_CDParameter, oWNR_BA_NOParameter, oWNR_INT_DECParameter, cTR_PTY_NOParameter, pROP_NOParameter, dO_TYPE_CDParameter, dO_MAJ_PROD_CDParameter, tIERParameter, pPN_RSN_CDParameter, pRDN_DTParameter, sT_CDParameter, mMBTU_OWNR_VOLParameter, wELL_NOParameter, cOMPL_NOParameter, dISP_CDParameter, nET_VOLParameter, newID);
        }
    
        public virtual ObjectResult<JTRN_SL_DETAILSelect_Result> JTRN_SL_DETAILSelect(Nullable<long> sL_DETAIL_NO)
        {
            var sL_DETAIL_NOParameter = sL_DETAIL_NO.HasValue ?
                new ObjectParameter("SL_DETAIL_NO", sL_DETAIL_NO) :
                new ObjectParameter("SL_DETAIL_NO", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JTRN_SL_DETAILSelect_Result>("JTRN_SL_DETAILSelect", sL_DETAIL_NOParameter);
        }
    
        public virtual ObjectResult<JTRN_SL_DETAILSelectAll_Result> JTRN_SL_DETAILSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JTRN_SL_DETAILSelectAll_Result>("JTRN_SL_DETAILSelectAll");
        }
    
        public virtual int JTRN_SL_DETAILUpdate(Nullable<long> sL_DETAIL_NO, string oPER_BUS_SEG_CD, Nullable<System.DateTime> aCCTG_MTH, string aCCT_NO, Nullable<decimal> tRANS_VAL_AMT, Nullable<decimal> tRANS_QTY, Nullable<decimal> bTU_FACT, Nullable<decimal> gRS_AMT, Nullable<decimal> gRS_QTY, string mAJ_PROD_CD, string pROD_CD, string oWNR_BA_NO, Nullable<decimal> oWNR_INT_DEC, string cTR_PTY_NO, string pROP_NO, string dO_TYPE_CD, string dO_MAJ_PROD_CD, Nullable<int> tIER, string pPN_RSN_CD, Nullable<System.DateTime> pRDN_DT, string sT_CD, Nullable<decimal> mMBTU_OWNR_VOL, string wELL_NO, string cOMPL_NO, string dISP_CD, Nullable<decimal> nET_VOL)
        {
            var sL_DETAIL_NOParameter = sL_DETAIL_NO.HasValue ?
                new ObjectParameter("SL_DETAIL_NO", sL_DETAIL_NO) :
                new ObjectParameter("SL_DETAIL_NO", typeof(long));
    
            var oPER_BUS_SEG_CDParameter = oPER_BUS_SEG_CD != null ?
                new ObjectParameter("OPER_BUS_SEG_CD", oPER_BUS_SEG_CD) :
                new ObjectParameter("OPER_BUS_SEG_CD", typeof(string));
    
            var aCCTG_MTHParameter = aCCTG_MTH.HasValue ?
                new ObjectParameter("ACCTG_MTH", aCCTG_MTH) :
                new ObjectParameter("ACCTG_MTH", typeof(System.DateTime));
    
            var aCCT_NOParameter = aCCT_NO != null ?
                new ObjectParameter("ACCT_NO", aCCT_NO) :
                new ObjectParameter("ACCT_NO", typeof(string));
    
            var tRANS_VAL_AMTParameter = tRANS_VAL_AMT.HasValue ?
                new ObjectParameter("TRANS_VAL_AMT", tRANS_VAL_AMT) :
                new ObjectParameter("TRANS_VAL_AMT", typeof(decimal));
    
            var tRANS_QTYParameter = tRANS_QTY.HasValue ?
                new ObjectParameter("TRANS_QTY", tRANS_QTY) :
                new ObjectParameter("TRANS_QTY", typeof(decimal));
    
            var bTU_FACTParameter = bTU_FACT.HasValue ?
                new ObjectParameter("BTU_FACT", bTU_FACT) :
                new ObjectParameter("BTU_FACT", typeof(decimal));
    
            var gRS_AMTParameter = gRS_AMT.HasValue ?
                new ObjectParameter("GRS_AMT", gRS_AMT) :
                new ObjectParameter("GRS_AMT", typeof(decimal));
    
            var gRS_QTYParameter = gRS_QTY.HasValue ?
                new ObjectParameter("GRS_QTY", gRS_QTY) :
                new ObjectParameter("GRS_QTY", typeof(decimal));
    
            var mAJ_PROD_CDParameter = mAJ_PROD_CD != null ?
                new ObjectParameter("MAJ_PROD_CD", mAJ_PROD_CD) :
                new ObjectParameter("MAJ_PROD_CD", typeof(string));
    
            var pROD_CDParameter = pROD_CD != null ?
                new ObjectParameter("PROD_CD", pROD_CD) :
                new ObjectParameter("PROD_CD", typeof(string));
    
            var oWNR_BA_NOParameter = oWNR_BA_NO != null ?
                new ObjectParameter("OWNR_BA_NO", oWNR_BA_NO) :
                new ObjectParameter("OWNR_BA_NO", typeof(string));
    
            var oWNR_INT_DECParameter = oWNR_INT_DEC.HasValue ?
                new ObjectParameter("OWNR_INT_DEC", oWNR_INT_DEC) :
                new ObjectParameter("OWNR_INT_DEC", typeof(decimal));
    
            var cTR_PTY_NOParameter = cTR_PTY_NO != null ?
                new ObjectParameter("CTR_PTY_NO", cTR_PTY_NO) :
                new ObjectParameter("CTR_PTY_NO", typeof(string));
    
            var pROP_NOParameter = pROP_NO != null ?
                new ObjectParameter("PROP_NO", pROP_NO) :
                new ObjectParameter("PROP_NO", typeof(string));
    
            var dO_TYPE_CDParameter = dO_TYPE_CD != null ?
                new ObjectParameter("DO_TYPE_CD", dO_TYPE_CD) :
                new ObjectParameter("DO_TYPE_CD", typeof(string));
    
            var dO_MAJ_PROD_CDParameter = dO_MAJ_PROD_CD != null ?
                new ObjectParameter("DO_MAJ_PROD_CD", dO_MAJ_PROD_CD) :
                new ObjectParameter("DO_MAJ_PROD_CD", typeof(string));
    
            var tIERParameter = tIER.HasValue ?
                new ObjectParameter("TIER", tIER) :
                new ObjectParameter("TIER", typeof(int));
    
            var pPN_RSN_CDParameter = pPN_RSN_CD != null ?
                new ObjectParameter("PPN_RSN_CD", pPN_RSN_CD) :
                new ObjectParameter("PPN_RSN_CD", typeof(string));
    
            var pRDN_DTParameter = pRDN_DT.HasValue ?
                new ObjectParameter("PRDN_DT", pRDN_DT) :
                new ObjectParameter("PRDN_DT", typeof(System.DateTime));
    
            var sT_CDParameter = sT_CD != null ?
                new ObjectParameter("ST_CD", sT_CD) :
                new ObjectParameter("ST_CD", typeof(string));
    
            var mMBTU_OWNR_VOLParameter = mMBTU_OWNR_VOL.HasValue ?
                new ObjectParameter("MMBTU_OWNR_VOL", mMBTU_OWNR_VOL) :
                new ObjectParameter("MMBTU_OWNR_VOL", typeof(decimal));
    
            var wELL_NOParameter = wELL_NO != null ?
                new ObjectParameter("WELL_NO", wELL_NO) :
                new ObjectParameter("WELL_NO", typeof(string));
    
            var cOMPL_NOParameter = cOMPL_NO != null ?
                new ObjectParameter("COMPL_NO", cOMPL_NO) :
                new ObjectParameter("COMPL_NO", typeof(string));
    
            var dISP_CDParameter = dISP_CD != null ?
                new ObjectParameter("DISP_CD", dISP_CD) :
                new ObjectParameter("DISP_CD", typeof(string));
    
            var nET_VOLParameter = nET_VOL.HasValue ?
                new ObjectParameter("NET_VOL", nET_VOL) :
                new ObjectParameter("NET_VOL", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JTRN_SL_DETAILUpdate", sL_DETAIL_NOParameter, oPER_BUS_SEG_CDParameter, aCCTG_MTHParameter, aCCT_NOParameter, tRANS_VAL_AMTParameter, tRANS_QTYParameter, bTU_FACTParameter, gRS_AMTParameter, gRS_QTYParameter, mAJ_PROD_CDParameter, pROD_CDParameter, oWNR_BA_NOParameter, oWNR_INT_DECParameter, cTR_PTY_NOParameter, pROP_NOParameter, dO_TYPE_CDParameter, dO_MAJ_PROD_CDParameter, tIERParameter, pPN_RSN_CDParameter, pRDN_DTParameter, sT_CDParameter, mMBTU_OWNR_VOLParameter, wELL_NOParameter, cOMPL_NOParameter, dISP_CDParameter, nET_VOLParameter);
        }
    
        public virtual ObjectResult<LeaseAgreementsSelect_Result> LeaseAgreementsSelect(Nullable<int> leaseAgreementID)
        {
            var leaseAgreementIDParameter = leaseAgreementID.HasValue ?
                new ObjectParameter("LeaseAgreementID", leaseAgreementID) :
                new ObjectParameter("LeaseAgreementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaseAgreementsSelect_Result>("LeaseAgreementsSelect", leaseAgreementIDParameter);
        }
    
        public virtual ObjectResult<LeaseAgreementsSelectAll_Result> LeaseAgreementsSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaseAgreementsSelectAll_Result>("LeaseAgreementsSelectAll");
        }
    
        public virtual int LeaseClassificationsInsert(string qLSClassificationID, string classification, Nullable<bool> active, ObjectParameter newID)
        {
            var qLSClassificationIDParameter = qLSClassificationID != null ?
                new ObjectParameter("QLSClassificationID", qLSClassificationID) :
                new ObjectParameter("QLSClassificationID", typeof(string));
    
            var classificationParameter = classification != null ?
                new ObjectParameter("Classification", classification) :
                new ObjectParameter("Classification", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeaseClassificationsInsert", qLSClassificationIDParameter, classificationParameter, activeParameter, newID);
        }
    
        public virtual ObjectResult<LeaseClassificationsSelect_Result> LeaseClassificationsSelect(Nullable<int> leaseClassificationID)
        {
            var leaseClassificationIDParameter = leaseClassificationID.HasValue ?
                new ObjectParameter("LeaseClassificationID", leaseClassificationID) :
                new ObjectParameter("LeaseClassificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaseClassificationsSelect_Result>("LeaseClassificationsSelect", leaseClassificationIDParameter);
        }
    
        public virtual ObjectResult<LeaseClassificationsSelectAll_Result> LeaseClassificationsSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaseClassificationsSelectAll_Result>("LeaseClassificationsSelectAll");
        }
    
        public virtual int LeaseClassificationsUpdate(Nullable<int> leaseClassificationID, string qLSClassificationID, string classification, Nullable<bool> active)
        {
            var leaseClassificationIDParameter = leaseClassificationID.HasValue ?
                new ObjectParameter("LeaseClassificationID", leaseClassificationID) :
                new ObjectParameter("LeaseClassificationID", typeof(int));
    
            var qLSClassificationIDParameter = qLSClassificationID != null ?
                new ObjectParameter("QLSClassificationID", qLSClassificationID) :
                new ObjectParameter("QLSClassificationID", typeof(string));
    
            var classificationParameter = classification != null ?
                new ObjectParameter("Classification", classification) :
                new ObjectParameter("Classification", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeaseClassificationsUpdate", leaseClassificationIDParameter, qLSClassificationIDParameter, classificationParameter, activeParameter);
        }
    
        public virtual int ONRRAggregateInsert(Nullable<int> leaseAgreementID, Nullable<int> productCodeID, Nullable<int> salesTypeID, Nullable<System.DateTime> productionMonth, Nullable<int> transactionCodeID, Nullable<int> adjustmentReasonCodeID, Nullable<decimal> salesVolume, Nullable<decimal> gasMMBTU, Nullable<decimal> salesValue, Nullable<decimal> grossRoyaltyValue, Nullable<decimal> transortationAllowanceDeduction, Nullable<decimal> processingAllowanceDeduction, Nullable<decimal> netRoyaltyValue, Nullable<int> fileID, string pADNumber, Nullable<int> payorCodeID, Nullable<int> statusID, Nullable<int> paymentMethodID, ObjectParameter newID)
        {
            var leaseAgreementIDParameter = leaseAgreementID.HasValue ?
                new ObjectParameter("LeaseAgreementID", leaseAgreementID) :
                new ObjectParameter("LeaseAgreementID", typeof(int));
    
            var productCodeIDParameter = productCodeID.HasValue ?
                new ObjectParameter("ProductCodeID", productCodeID) :
                new ObjectParameter("ProductCodeID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var productionMonthParameter = productionMonth.HasValue ?
                new ObjectParameter("ProductionMonth", productionMonth) :
                new ObjectParameter("ProductionMonth", typeof(System.DateTime));
    
            var transactionCodeIDParameter = transactionCodeID.HasValue ?
                new ObjectParameter("TransactionCodeID", transactionCodeID) :
                new ObjectParameter("TransactionCodeID", typeof(int));
    
            var adjustmentReasonCodeIDParameter = adjustmentReasonCodeID.HasValue ?
                new ObjectParameter("AdjustmentReasonCodeID", adjustmentReasonCodeID) :
                new ObjectParameter("AdjustmentReasonCodeID", typeof(int));
    
            var salesVolumeParameter = salesVolume.HasValue ?
                new ObjectParameter("SalesVolume", salesVolume) :
                new ObjectParameter("SalesVolume", typeof(decimal));
    
            var gasMMBTUParameter = gasMMBTU.HasValue ?
                new ObjectParameter("GasMMBTU", gasMMBTU) :
                new ObjectParameter("GasMMBTU", typeof(decimal));
    
            var salesValueParameter = salesValue.HasValue ?
                new ObjectParameter("SalesValue", salesValue) :
                new ObjectParameter("SalesValue", typeof(decimal));
    
            var grossRoyaltyValueParameter = grossRoyaltyValue.HasValue ?
                new ObjectParameter("GrossRoyaltyValue", grossRoyaltyValue) :
                new ObjectParameter("GrossRoyaltyValue", typeof(decimal));
    
            var transortationAllowanceDeductionParameter = transortationAllowanceDeduction.HasValue ?
                new ObjectParameter("TransortationAllowanceDeduction", transortationAllowanceDeduction) :
                new ObjectParameter("TransortationAllowanceDeduction", typeof(decimal));
    
            var processingAllowanceDeductionParameter = processingAllowanceDeduction.HasValue ?
                new ObjectParameter("ProcessingAllowanceDeduction", processingAllowanceDeduction) :
                new ObjectParameter("ProcessingAllowanceDeduction", typeof(decimal));
    
            var netRoyaltyValueParameter = netRoyaltyValue.HasValue ?
                new ObjectParameter("NetRoyaltyValue", netRoyaltyValue) :
                new ObjectParameter("NetRoyaltyValue", typeof(decimal));
    
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var pADNumberParameter = pADNumber != null ?
                new ObjectParameter("PADNumber", pADNumber) :
                new ObjectParameter("PADNumber", typeof(string));
    
            var payorCodeIDParameter = payorCodeID.HasValue ?
                new ObjectParameter("PayorCodeID", payorCodeID) :
                new ObjectParameter("PayorCodeID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ONRRAggregateInsert", leaseAgreementIDParameter, productCodeIDParameter, salesTypeIDParameter, productionMonthParameter, transactionCodeIDParameter, adjustmentReasonCodeIDParameter, salesVolumeParameter, gasMMBTUParameter, salesValueParameter, grossRoyaltyValueParameter, transortationAllowanceDeductionParameter, processingAllowanceDeductionParameter, netRoyaltyValueParameter, fileIDParameter, pADNumberParameter, payorCodeIDParameter, statusIDParameter, paymentMethodIDParameter, newID);
        }
    
        public virtual ObjectResult<ONRRAggregateSelect_Result> ONRRAggregateSelect(Nullable<int> aggregateID)
        {
            var aggregateIDParameter = aggregateID.HasValue ?
                new ObjectParameter("AggregateID", aggregateID) :
                new ObjectParameter("AggregateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ONRRAggregateSelect_Result>("ONRRAggregateSelect", aggregateIDParameter);
        }
    
        public virtual ObjectResult<ONRRAggregateSelectAll_Result> ONRRAggregateSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ONRRAggregateSelectAll_Result>("ONRRAggregateSelectAll");
        }
    
        public virtual int ONRRAggregateUpdate(Nullable<int> aggregateID, Nullable<int> leaseAgreementID, Nullable<int> productCodeID, Nullable<int> salesTypeID, Nullable<System.DateTime> productionMonth, Nullable<int> transactionCodeID, Nullable<int> adjustmentReasonCodeID, Nullable<decimal> salesVolume, Nullable<decimal> gasMMBTU, Nullable<decimal> salesValue, Nullable<decimal> grossRoyaltyValue, Nullable<decimal> transortationAllowanceDeduction, Nullable<decimal> processingAllowanceDeduction, Nullable<decimal> netRoyaltyValue, Nullable<int> fileID, string pADNumber, Nullable<int> payorCodeID, Nullable<int> statusID, Nullable<int> paymentMethodID)
        {
            var aggregateIDParameter = aggregateID.HasValue ?
                new ObjectParameter("AggregateID", aggregateID) :
                new ObjectParameter("AggregateID", typeof(int));
    
            var leaseAgreementIDParameter = leaseAgreementID.HasValue ?
                new ObjectParameter("LeaseAgreementID", leaseAgreementID) :
                new ObjectParameter("LeaseAgreementID", typeof(int));
    
            var productCodeIDParameter = productCodeID.HasValue ?
                new ObjectParameter("ProductCodeID", productCodeID) :
                new ObjectParameter("ProductCodeID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var productionMonthParameter = productionMonth.HasValue ?
                new ObjectParameter("ProductionMonth", productionMonth) :
                new ObjectParameter("ProductionMonth", typeof(System.DateTime));
    
            var transactionCodeIDParameter = transactionCodeID.HasValue ?
                new ObjectParameter("TransactionCodeID", transactionCodeID) :
                new ObjectParameter("TransactionCodeID", typeof(int));
    
            var adjustmentReasonCodeIDParameter = adjustmentReasonCodeID.HasValue ?
                new ObjectParameter("AdjustmentReasonCodeID", adjustmentReasonCodeID) :
                new ObjectParameter("AdjustmentReasonCodeID", typeof(int));
    
            var salesVolumeParameter = salesVolume.HasValue ?
                new ObjectParameter("SalesVolume", salesVolume) :
                new ObjectParameter("SalesVolume", typeof(decimal));
    
            var gasMMBTUParameter = gasMMBTU.HasValue ?
                new ObjectParameter("GasMMBTU", gasMMBTU) :
                new ObjectParameter("GasMMBTU", typeof(decimal));
    
            var salesValueParameter = salesValue.HasValue ?
                new ObjectParameter("SalesValue", salesValue) :
                new ObjectParameter("SalesValue", typeof(decimal));
    
            var grossRoyaltyValueParameter = grossRoyaltyValue.HasValue ?
                new ObjectParameter("GrossRoyaltyValue", grossRoyaltyValue) :
                new ObjectParameter("GrossRoyaltyValue", typeof(decimal));
    
            var transortationAllowanceDeductionParameter = transortationAllowanceDeduction.HasValue ?
                new ObjectParameter("TransortationAllowanceDeduction", transortationAllowanceDeduction) :
                new ObjectParameter("TransortationAllowanceDeduction", typeof(decimal));
    
            var processingAllowanceDeductionParameter = processingAllowanceDeduction.HasValue ?
                new ObjectParameter("ProcessingAllowanceDeduction", processingAllowanceDeduction) :
                new ObjectParameter("ProcessingAllowanceDeduction", typeof(decimal));
    
            var netRoyaltyValueParameter = netRoyaltyValue.HasValue ?
                new ObjectParameter("NetRoyaltyValue", netRoyaltyValue) :
                new ObjectParameter("NetRoyaltyValue", typeof(decimal));
    
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var pADNumberParameter = pADNumber != null ?
                new ObjectParameter("PADNumber", pADNumber) :
                new ObjectParameter("PADNumber", typeof(string));
    
            var payorCodeIDParameter = payorCodeID.HasValue ?
                new ObjectParameter("PayorCodeID", payorCodeID) :
                new ObjectParameter("PayorCodeID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ONRRAggregateUpdate", aggregateIDParameter, leaseAgreementIDParameter, productCodeIDParameter, salesTypeIDParameter, productionMonthParameter, transactionCodeIDParameter, adjustmentReasonCodeIDParameter, salesVolumeParameter, gasMMBTUParameter, salesValueParameter, grossRoyaltyValueParameter, transortationAllowanceDeductionParameter, processingAllowanceDeductionParameter, netRoyaltyValueParameter, fileIDParameter, pADNumberParameter, payorCodeIDParameter, statusIDParameter, paymentMethodIDParameter);
        }
    
        public virtual int ONRRDetailInsert(Nullable<int> oNRRDetailID, Nullable<decimal> grossAmount, Nullable<decimal> overrideGrossAmount, Nullable<decimal> grossQuantity, Nullable<decimal> overrideGrossQuantity, Nullable<decimal> transactionValueAmount, Nullable<decimal> overrideTransactionValueAmount, Nullable<decimal> transactionQuantity, Nullable<decimal> overrideTransactionQuantity, Nullable<decimal> price, Nullable<int> leaseAgreementID, Nullable<int> productCodeID, string stateCode, Nullable<decimal> companyMarketedVolume, Nullable<decimal> overrideCompanyMarketedVolume, Nullable<decimal> companyMarketedValue, Nullable<decimal> overrideCompanyMarketedValue, Nullable<decimal> salesVolume, Nullable<decimal> overrideSalesVolume, Nullable<decimal> mMBTU, Nullable<decimal> overrideMMBTU, Nullable<decimal> salesValue, Nullable<decimal> overrideSalesValue, Nullable<decimal> grossRoyaltyValue, Nullable<decimal> overrideGrossRoyaltyValue, Nullable<decimal> transportationAllowanceDeduction, Nullable<decimal> overrideTransportationAllowanceDeduction, Nullable<decimal> processingAllowanceDeduction, Nullable<decimal> overrideProcessingAllowanceDeduction, Nullable<decimal> netRoyaltyValue, Nullable<decimal> overrideNetRoyaltyValue, Nullable<int> aggregateID, Nullable<int> reversalAggregateID, Nullable<System.DateTime> accountingMonth, Nullable<System.DateTime> productionMonth, Nullable<int> transactionCodeID, Nullable<int> adjustmentReasonCodeID, Nullable<int> processingStatusID, Nullable<int> suspendReasonID, Nullable<int> salesTypeID, Nullable<int> reversalDetailID, ObjectParameter newID)
        {
            var oNRRDetailIDParameter = oNRRDetailID.HasValue ?
                new ObjectParameter("ONRRDetailID", oNRRDetailID) :
                new ObjectParameter("ONRRDetailID", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var overrideGrossAmountParameter = overrideGrossAmount.HasValue ?
                new ObjectParameter("OverrideGrossAmount", overrideGrossAmount) :
                new ObjectParameter("OverrideGrossAmount", typeof(decimal));
    
            var grossQuantityParameter = grossQuantity.HasValue ?
                new ObjectParameter("GrossQuantity", grossQuantity) :
                new ObjectParameter("GrossQuantity", typeof(decimal));
    
            var overrideGrossQuantityParameter = overrideGrossQuantity.HasValue ?
                new ObjectParameter("OverrideGrossQuantity", overrideGrossQuantity) :
                new ObjectParameter("OverrideGrossQuantity", typeof(decimal));
    
            var transactionValueAmountParameter = transactionValueAmount.HasValue ?
                new ObjectParameter("TransactionValueAmount", transactionValueAmount) :
                new ObjectParameter("TransactionValueAmount", typeof(decimal));
    
            var overrideTransactionValueAmountParameter = overrideTransactionValueAmount.HasValue ?
                new ObjectParameter("OverrideTransactionValueAmount", overrideTransactionValueAmount) :
                new ObjectParameter("OverrideTransactionValueAmount", typeof(decimal));
    
            var transactionQuantityParameter = transactionQuantity.HasValue ?
                new ObjectParameter("TransactionQuantity", transactionQuantity) :
                new ObjectParameter("TransactionQuantity", typeof(decimal));
    
            var overrideTransactionQuantityParameter = overrideTransactionQuantity.HasValue ?
                new ObjectParameter("OverrideTransactionQuantity", overrideTransactionQuantity) :
                new ObjectParameter("OverrideTransactionQuantity", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var leaseAgreementIDParameter = leaseAgreementID.HasValue ?
                new ObjectParameter("LeaseAgreementID", leaseAgreementID) :
                new ObjectParameter("LeaseAgreementID", typeof(int));
    
            var productCodeIDParameter = productCodeID.HasValue ?
                new ObjectParameter("ProductCodeID", productCodeID) :
                new ObjectParameter("ProductCodeID", typeof(int));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var companyMarketedVolumeParameter = companyMarketedVolume.HasValue ?
                new ObjectParameter("CompanyMarketedVolume", companyMarketedVolume) :
                new ObjectParameter("CompanyMarketedVolume", typeof(decimal));
    
            var overrideCompanyMarketedVolumeParameter = overrideCompanyMarketedVolume.HasValue ?
                new ObjectParameter("OverrideCompanyMarketedVolume", overrideCompanyMarketedVolume) :
                new ObjectParameter("OverrideCompanyMarketedVolume", typeof(decimal));
    
            var companyMarketedValueParameter = companyMarketedValue.HasValue ?
                new ObjectParameter("CompanyMarketedValue", companyMarketedValue) :
                new ObjectParameter("CompanyMarketedValue", typeof(decimal));
    
            var overrideCompanyMarketedValueParameter = overrideCompanyMarketedValue.HasValue ?
                new ObjectParameter("OverrideCompanyMarketedValue", overrideCompanyMarketedValue) :
                new ObjectParameter("OverrideCompanyMarketedValue", typeof(decimal));
    
            var salesVolumeParameter = salesVolume.HasValue ?
                new ObjectParameter("SalesVolume", salesVolume) :
                new ObjectParameter("SalesVolume", typeof(decimal));
    
            var overrideSalesVolumeParameter = overrideSalesVolume.HasValue ?
                new ObjectParameter("OverrideSalesVolume", overrideSalesVolume) :
                new ObjectParameter("OverrideSalesVolume", typeof(decimal));
    
            var mMBTUParameter = mMBTU.HasValue ?
                new ObjectParameter("MMBTU", mMBTU) :
                new ObjectParameter("MMBTU", typeof(decimal));
    
            var overrideMMBTUParameter = overrideMMBTU.HasValue ?
                new ObjectParameter("OverrideMMBTU", overrideMMBTU) :
                new ObjectParameter("OverrideMMBTU", typeof(decimal));
    
            var salesValueParameter = salesValue.HasValue ?
                new ObjectParameter("SalesValue", salesValue) :
                new ObjectParameter("SalesValue", typeof(decimal));
    
            var overrideSalesValueParameter = overrideSalesValue.HasValue ?
                new ObjectParameter("OverrideSalesValue", overrideSalesValue) :
                new ObjectParameter("OverrideSalesValue", typeof(decimal));
    
            var grossRoyaltyValueParameter = grossRoyaltyValue.HasValue ?
                new ObjectParameter("GrossRoyaltyValue", grossRoyaltyValue) :
                new ObjectParameter("GrossRoyaltyValue", typeof(decimal));
    
            var overrideGrossRoyaltyValueParameter = overrideGrossRoyaltyValue.HasValue ?
                new ObjectParameter("OverrideGrossRoyaltyValue", overrideGrossRoyaltyValue) :
                new ObjectParameter("OverrideGrossRoyaltyValue", typeof(decimal));
    
            var transportationAllowanceDeductionParameter = transportationAllowanceDeduction.HasValue ?
                new ObjectParameter("TransportationAllowanceDeduction", transportationAllowanceDeduction) :
                new ObjectParameter("TransportationAllowanceDeduction", typeof(decimal));
    
            var overrideTransportationAllowanceDeductionParameter = overrideTransportationAllowanceDeduction.HasValue ?
                new ObjectParameter("OverrideTransportationAllowanceDeduction", overrideTransportationAllowanceDeduction) :
                new ObjectParameter("OverrideTransportationAllowanceDeduction", typeof(decimal));
    
            var processingAllowanceDeductionParameter = processingAllowanceDeduction.HasValue ?
                new ObjectParameter("ProcessingAllowanceDeduction", processingAllowanceDeduction) :
                new ObjectParameter("ProcessingAllowanceDeduction", typeof(decimal));
    
            var overrideProcessingAllowanceDeductionParameter = overrideProcessingAllowanceDeduction.HasValue ?
                new ObjectParameter("OverrideProcessingAllowanceDeduction", overrideProcessingAllowanceDeduction) :
                new ObjectParameter("OverrideProcessingAllowanceDeduction", typeof(decimal));
    
            var netRoyaltyValueParameter = netRoyaltyValue.HasValue ?
                new ObjectParameter("NetRoyaltyValue", netRoyaltyValue) :
                new ObjectParameter("NetRoyaltyValue", typeof(decimal));
    
            var overrideNetRoyaltyValueParameter = overrideNetRoyaltyValue.HasValue ?
                new ObjectParameter("OverrideNetRoyaltyValue", overrideNetRoyaltyValue) :
                new ObjectParameter("OverrideNetRoyaltyValue", typeof(decimal));
    
            var aggregateIDParameter = aggregateID.HasValue ?
                new ObjectParameter("AggregateID", aggregateID) :
                new ObjectParameter("AggregateID", typeof(int));
    
            var reversalAggregateIDParameter = reversalAggregateID.HasValue ?
                new ObjectParameter("ReversalAggregateID", reversalAggregateID) :
                new ObjectParameter("ReversalAggregateID", typeof(int));
    
            var accountingMonthParameter = accountingMonth.HasValue ?
                new ObjectParameter("AccountingMonth", accountingMonth) :
                new ObjectParameter("AccountingMonth", typeof(System.DateTime));
    
            var productionMonthParameter = productionMonth.HasValue ?
                new ObjectParameter("ProductionMonth", productionMonth) :
                new ObjectParameter("ProductionMonth", typeof(System.DateTime));
    
            var transactionCodeIDParameter = transactionCodeID.HasValue ?
                new ObjectParameter("TransactionCodeID", transactionCodeID) :
                new ObjectParameter("TransactionCodeID", typeof(int));
    
            var adjustmentReasonCodeIDParameter = adjustmentReasonCodeID.HasValue ?
                new ObjectParameter("AdjustmentReasonCodeID", adjustmentReasonCodeID) :
                new ObjectParameter("AdjustmentReasonCodeID", typeof(int));
    
            var processingStatusIDParameter = processingStatusID.HasValue ?
                new ObjectParameter("ProcessingStatusID", processingStatusID) :
                new ObjectParameter("ProcessingStatusID", typeof(int));
    
            var suspendReasonIDParameter = suspendReasonID.HasValue ?
                new ObjectParameter("SuspendReasonID", suspendReasonID) :
                new ObjectParameter("SuspendReasonID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var reversalDetailIDParameter = reversalDetailID.HasValue ?
                new ObjectParameter("ReversalDetailID", reversalDetailID) :
                new ObjectParameter("ReversalDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ONRRDetailInsert", oNRRDetailIDParameter, grossAmountParameter, overrideGrossAmountParameter, grossQuantityParameter, overrideGrossQuantityParameter, transactionValueAmountParameter, overrideTransactionValueAmountParameter, transactionQuantityParameter, overrideTransactionQuantityParameter, priceParameter, leaseAgreementIDParameter, productCodeIDParameter, stateCodeParameter, companyMarketedVolumeParameter, overrideCompanyMarketedVolumeParameter, companyMarketedValueParameter, overrideCompanyMarketedValueParameter, salesVolumeParameter, overrideSalesVolumeParameter, mMBTUParameter, overrideMMBTUParameter, salesValueParameter, overrideSalesValueParameter, grossRoyaltyValueParameter, overrideGrossRoyaltyValueParameter, transportationAllowanceDeductionParameter, overrideTransportationAllowanceDeductionParameter, processingAllowanceDeductionParameter, overrideProcessingAllowanceDeductionParameter, netRoyaltyValueParameter, overrideNetRoyaltyValueParameter, aggregateIDParameter, reversalAggregateIDParameter, accountingMonthParameter, productionMonthParameter, transactionCodeIDParameter, adjustmentReasonCodeIDParameter, processingStatusIDParameter, suspendReasonIDParameter, salesTypeIDParameter, reversalDetailIDParameter, newID);
        }
    
        public virtual ObjectResult<ONRRDetailSelect_Result> ONRRDetailSelect(Nullable<long> oNRRDetailID)
        {
            var oNRRDetailIDParameter = oNRRDetailID.HasValue ?
                new ObjectParameter("ONRRDetailID", oNRRDetailID) :
                new ObjectParameter("ONRRDetailID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ONRRDetailSelect_Result>("ONRRDetailSelect", oNRRDetailIDParameter);
        }
    
        public virtual ObjectResult<ONRRDetailSelectAll_Result> ONRRDetailSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ONRRDetailSelectAll_Result>("ONRRDetailSelectAll");
        }
    
        public virtual int ONRRDetailUpdate(Nullable<int> oNRRDetailID, Nullable<long> sL_DETAIL_NO, Nullable<decimal> grossAmount, Nullable<decimal> overrideGrossAmount, Nullable<decimal> grossQuantity, Nullable<decimal> overrideGrossQuantity, Nullable<decimal> transactionValueAmount, Nullable<decimal> overrideTransactionValueAmount, Nullable<decimal> transactionQuantity, Nullable<decimal> overrideTransactionQuantity, Nullable<decimal> price, Nullable<int> leaseAgreementID, Nullable<int> productCodeID, string stateCode, Nullable<decimal> companyMarketedVolume, Nullable<decimal> overrideCompanyMarketedVolume, Nullable<decimal> companyMarketedValue, Nullable<decimal> overrideCompanyMarketedValue, Nullable<decimal> salesVolume, Nullable<decimal> overrideSalesVolume, Nullable<decimal> mMBTU, Nullable<decimal> overrideMMBTU, Nullable<decimal> salesValue, Nullable<decimal> overrideSalesValue, Nullable<decimal> grossRoyaltyValue, Nullable<decimal> overrideGrossRoyaltyValue, Nullable<decimal> transportationAllowanceDeduction, Nullable<decimal> overrideTransportationAllowanceDeduction, Nullable<decimal> processingAllowanceDeduction, Nullable<decimal> overrideProcessingAllowanceDeduction, Nullable<decimal> netRoyaltyValue, Nullable<decimal> overrideNetRoyaltyValue, Nullable<int> aggregateID, Nullable<int> reversalAggregateID, Nullable<System.DateTime> accountingMonth, Nullable<System.DateTime> productionMonth, Nullable<int> transactionCodeID, Nullable<int> adjustmentReasonCodeID, Nullable<int> processingStatusID, Nullable<int> suspendReasonID, Nullable<int> salesTypeID, Nullable<int> reversalDetailID)
        {
            var oNRRDetailIDParameter = oNRRDetailID.HasValue ?
                new ObjectParameter("ONRRDetailID", oNRRDetailID) :
                new ObjectParameter("ONRRDetailID", typeof(int));
    
            var sL_DETAIL_NOParameter = sL_DETAIL_NO.HasValue ?
                new ObjectParameter("SL_DETAIL_NO", sL_DETAIL_NO) :
                new ObjectParameter("SL_DETAIL_NO", typeof(long));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var overrideGrossAmountParameter = overrideGrossAmount.HasValue ?
                new ObjectParameter("OverrideGrossAmount", overrideGrossAmount) :
                new ObjectParameter("OverrideGrossAmount", typeof(decimal));
    
            var grossQuantityParameter = grossQuantity.HasValue ?
                new ObjectParameter("GrossQuantity", grossQuantity) :
                new ObjectParameter("GrossQuantity", typeof(decimal));
    
            var overrideGrossQuantityParameter = overrideGrossQuantity.HasValue ?
                new ObjectParameter("OverrideGrossQuantity", overrideGrossQuantity) :
                new ObjectParameter("OverrideGrossQuantity", typeof(decimal));
    
            var transactionValueAmountParameter = transactionValueAmount.HasValue ?
                new ObjectParameter("TransactionValueAmount", transactionValueAmount) :
                new ObjectParameter("TransactionValueAmount", typeof(decimal));
    
            var overrideTransactionValueAmountParameter = overrideTransactionValueAmount.HasValue ?
                new ObjectParameter("OverrideTransactionValueAmount", overrideTransactionValueAmount) :
                new ObjectParameter("OverrideTransactionValueAmount", typeof(decimal));
    
            var transactionQuantityParameter = transactionQuantity.HasValue ?
                new ObjectParameter("TransactionQuantity", transactionQuantity) :
                new ObjectParameter("TransactionQuantity", typeof(decimal));
    
            var overrideTransactionQuantityParameter = overrideTransactionQuantity.HasValue ?
                new ObjectParameter("OverrideTransactionQuantity", overrideTransactionQuantity) :
                new ObjectParameter("OverrideTransactionQuantity", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var leaseAgreementIDParameter = leaseAgreementID.HasValue ?
                new ObjectParameter("LeaseAgreementID", leaseAgreementID) :
                new ObjectParameter("LeaseAgreementID", typeof(int));
    
            var productCodeIDParameter = productCodeID.HasValue ?
                new ObjectParameter("ProductCodeID", productCodeID) :
                new ObjectParameter("ProductCodeID", typeof(int));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var companyMarketedVolumeParameter = companyMarketedVolume.HasValue ?
                new ObjectParameter("CompanyMarketedVolume", companyMarketedVolume) :
                new ObjectParameter("CompanyMarketedVolume", typeof(decimal));
    
            var overrideCompanyMarketedVolumeParameter = overrideCompanyMarketedVolume.HasValue ?
                new ObjectParameter("OverrideCompanyMarketedVolume", overrideCompanyMarketedVolume) :
                new ObjectParameter("OverrideCompanyMarketedVolume", typeof(decimal));
    
            var companyMarketedValueParameter = companyMarketedValue.HasValue ?
                new ObjectParameter("CompanyMarketedValue", companyMarketedValue) :
                new ObjectParameter("CompanyMarketedValue", typeof(decimal));
    
            var overrideCompanyMarketedValueParameter = overrideCompanyMarketedValue.HasValue ?
                new ObjectParameter("OverrideCompanyMarketedValue", overrideCompanyMarketedValue) :
                new ObjectParameter("OverrideCompanyMarketedValue", typeof(decimal));
    
            var salesVolumeParameter = salesVolume.HasValue ?
                new ObjectParameter("SalesVolume", salesVolume) :
                new ObjectParameter("SalesVolume", typeof(decimal));
    
            var overrideSalesVolumeParameter = overrideSalesVolume.HasValue ?
                new ObjectParameter("OverrideSalesVolume", overrideSalesVolume) :
                new ObjectParameter("OverrideSalesVolume", typeof(decimal));
    
            var mMBTUParameter = mMBTU.HasValue ?
                new ObjectParameter("MMBTU", mMBTU) :
                new ObjectParameter("MMBTU", typeof(decimal));
    
            var overrideMMBTUParameter = overrideMMBTU.HasValue ?
                new ObjectParameter("OverrideMMBTU", overrideMMBTU) :
                new ObjectParameter("OverrideMMBTU", typeof(decimal));
    
            var salesValueParameter = salesValue.HasValue ?
                new ObjectParameter("SalesValue", salesValue) :
                new ObjectParameter("SalesValue", typeof(decimal));
    
            var overrideSalesValueParameter = overrideSalesValue.HasValue ?
                new ObjectParameter("OverrideSalesValue", overrideSalesValue) :
                new ObjectParameter("OverrideSalesValue", typeof(decimal));
    
            var grossRoyaltyValueParameter = grossRoyaltyValue.HasValue ?
                new ObjectParameter("GrossRoyaltyValue", grossRoyaltyValue) :
                new ObjectParameter("GrossRoyaltyValue", typeof(decimal));
    
            var overrideGrossRoyaltyValueParameter = overrideGrossRoyaltyValue.HasValue ?
                new ObjectParameter("OverrideGrossRoyaltyValue", overrideGrossRoyaltyValue) :
                new ObjectParameter("OverrideGrossRoyaltyValue", typeof(decimal));
    
            var transportationAllowanceDeductionParameter = transportationAllowanceDeduction.HasValue ?
                new ObjectParameter("TransportationAllowanceDeduction", transportationAllowanceDeduction) :
                new ObjectParameter("TransportationAllowanceDeduction", typeof(decimal));
    
            var overrideTransportationAllowanceDeductionParameter = overrideTransportationAllowanceDeduction.HasValue ?
                new ObjectParameter("OverrideTransportationAllowanceDeduction", overrideTransportationAllowanceDeduction) :
                new ObjectParameter("OverrideTransportationAllowanceDeduction", typeof(decimal));
    
            var processingAllowanceDeductionParameter = processingAllowanceDeduction.HasValue ?
                new ObjectParameter("ProcessingAllowanceDeduction", processingAllowanceDeduction) :
                new ObjectParameter("ProcessingAllowanceDeduction", typeof(decimal));
    
            var overrideProcessingAllowanceDeductionParameter = overrideProcessingAllowanceDeduction.HasValue ?
                new ObjectParameter("OverrideProcessingAllowanceDeduction", overrideProcessingAllowanceDeduction) :
                new ObjectParameter("OverrideProcessingAllowanceDeduction", typeof(decimal));
    
            var netRoyaltyValueParameter = netRoyaltyValue.HasValue ?
                new ObjectParameter("NetRoyaltyValue", netRoyaltyValue) :
                new ObjectParameter("NetRoyaltyValue", typeof(decimal));
    
            var overrideNetRoyaltyValueParameter = overrideNetRoyaltyValue.HasValue ?
                new ObjectParameter("OverrideNetRoyaltyValue", overrideNetRoyaltyValue) :
                new ObjectParameter("OverrideNetRoyaltyValue", typeof(decimal));
    
            var aggregateIDParameter = aggregateID.HasValue ?
                new ObjectParameter("AggregateID", aggregateID) :
                new ObjectParameter("AggregateID", typeof(int));
    
            var reversalAggregateIDParameter = reversalAggregateID.HasValue ?
                new ObjectParameter("ReversalAggregateID", reversalAggregateID) :
                new ObjectParameter("ReversalAggregateID", typeof(int));
    
            var accountingMonthParameter = accountingMonth.HasValue ?
                new ObjectParameter("AccountingMonth", accountingMonth) :
                new ObjectParameter("AccountingMonth", typeof(System.DateTime));
    
            var productionMonthParameter = productionMonth.HasValue ?
                new ObjectParameter("ProductionMonth", productionMonth) :
                new ObjectParameter("ProductionMonth", typeof(System.DateTime));
    
            var transactionCodeIDParameter = transactionCodeID.HasValue ?
                new ObjectParameter("TransactionCodeID", transactionCodeID) :
                new ObjectParameter("TransactionCodeID", typeof(int));
    
            var adjustmentReasonCodeIDParameter = adjustmentReasonCodeID.HasValue ?
                new ObjectParameter("AdjustmentReasonCodeID", adjustmentReasonCodeID) :
                new ObjectParameter("AdjustmentReasonCodeID", typeof(int));
    
            var processingStatusIDParameter = processingStatusID.HasValue ?
                new ObjectParameter("ProcessingStatusID", processingStatusID) :
                new ObjectParameter("ProcessingStatusID", typeof(int));
    
            var suspendReasonIDParameter = suspendReasonID.HasValue ?
                new ObjectParameter("SuspendReasonID", suspendReasonID) :
                new ObjectParameter("SuspendReasonID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var reversalDetailIDParameter = reversalDetailID.HasValue ?
                new ObjectParameter("ReversalDetailID", reversalDetailID) :
                new ObjectParameter("ReversalDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ONRRDetailUpdate", oNRRDetailIDParameter, sL_DETAIL_NOParameter, grossAmountParameter, overrideGrossAmountParameter, grossQuantityParameter, overrideGrossQuantityParameter, transactionValueAmountParameter, overrideTransactionValueAmountParameter, transactionQuantityParameter, overrideTransactionQuantityParameter, priceParameter, leaseAgreementIDParameter, productCodeIDParameter, stateCodeParameter, companyMarketedVolumeParameter, overrideCompanyMarketedVolumeParameter, companyMarketedValueParameter, overrideCompanyMarketedValueParameter, salesVolumeParameter, overrideSalesVolumeParameter, mMBTUParameter, overrideMMBTUParameter, salesValueParameter, overrideSalesValueParameter, grossRoyaltyValueParameter, overrideGrossRoyaltyValueParameter, transportationAllowanceDeductionParameter, overrideTransportationAllowanceDeductionParameter, processingAllowanceDeductionParameter, overrideProcessingAllowanceDeductionParameter, netRoyaltyValueParameter, overrideNetRoyaltyValueParameter, aggregateIDParameter, reversalAggregateIDParameter, accountingMonthParameter, productionMonthParameter, transactionCodeIDParameter, adjustmentReasonCodeIDParameter, processingStatusIDParameter, suspendReasonIDParameter, salesTypeIDParameter, reversalDetailIDParameter);
        }
    
        public virtual int ONRRFilesInsert(Nullable<int> fileStatusID, Nullable<System.DateTime> generationDate, Nullable<System.DateTime> acceptedDate, ObjectParameter newID)
        {
            var fileStatusIDParameter = fileStatusID.HasValue ?
                new ObjectParameter("FileStatusID", fileStatusID) :
                new ObjectParameter("FileStatusID", typeof(int));
    
            var generationDateParameter = generationDate.HasValue ?
                new ObjectParameter("GenerationDate", generationDate) :
                new ObjectParameter("GenerationDate", typeof(System.DateTime));
    
            var acceptedDateParameter = acceptedDate.HasValue ?
                new ObjectParameter("AcceptedDate", acceptedDate) :
                new ObjectParameter("AcceptedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ONRRFilesInsert", fileStatusIDParameter, generationDateParameter, acceptedDateParameter, newID);
        }
    
        public virtual ObjectResult<ONRRFilesSelect_Result> ONRRFilesSelect(Nullable<int> fileID)
        {
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ONRRFilesSelect_Result>("ONRRFilesSelect", fileIDParameter);
        }
    
        public virtual ObjectResult<ONRRFilesSelectAll_Result> ONRRFilesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ONRRFilesSelectAll_Result>("ONRRFilesSelectAll");
        }
    
        public virtual int ONRRFilesUpdate(Nullable<int> fileID, Nullable<int> fileStatusID, Nullable<System.DateTime> generationDate, Nullable<System.DateTime> acceptedDate)
        {
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var fileStatusIDParameter = fileStatusID.HasValue ?
                new ObjectParameter("FileStatusID", fileStatusID) :
                new ObjectParameter("FileStatusID", typeof(int));
    
            var generationDateParameter = generationDate.HasValue ?
                new ObjectParameter("GenerationDate", generationDate) :
                new ObjectParameter("GenerationDate", typeof(System.DateTime));
    
            var acceptedDateParameter = acceptedDate.HasValue ?
                new ObjectParameter("AcceptedDate", acceptedDate) :
                new ObjectParameter("AcceptedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ONRRFilesUpdate", fileIDParameter, fileStatusIDParameter, generationDateParameter, acceptedDateParameter);
        }
    
        public virtual int ONRRTransactionCodesInsert(string oNRRTransactionCode, string productCode, string dispositionCode, ObjectParameter newID)
        {
            var oNRRTransactionCodeParameter = oNRRTransactionCode != null ?
                new ObjectParameter("ONRRTransactionCode", oNRRTransactionCode) :
                new ObjectParameter("ONRRTransactionCode", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var dispositionCodeParameter = dispositionCode != null ?
                new ObjectParameter("DispositionCode", dispositionCode) :
                new ObjectParameter("DispositionCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ONRRTransactionCodesInsert", oNRRTransactionCodeParameter, productCodeParameter, dispositionCodeParameter, newID);
        }
    
        public virtual ObjectResult<ONRRTransactionCodesSelect_Result> ONRRTransactionCodesSelect(Nullable<int> transactionCodeID)
        {
            var transactionCodeIDParameter = transactionCodeID.HasValue ?
                new ObjectParameter("TransactionCodeID", transactionCodeID) :
                new ObjectParameter("TransactionCodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ONRRTransactionCodesSelect_Result>("ONRRTransactionCodesSelect", transactionCodeIDParameter);
        }
    
        public virtual ObjectResult<ONRRTransactionCodesSelectAll_Result> ONRRTransactionCodesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ONRRTransactionCodesSelectAll_Result>("ONRRTransactionCodesSelectAll");
        }
    
        public virtual int ONRRTransactionCodesUpdate(Nullable<int> transactionCodeID, string oNRRTransactionCode, string productCode, string dispositionCode)
        {
            var transactionCodeIDParameter = transactionCodeID.HasValue ?
                new ObjectParameter("TransactionCodeID", transactionCodeID) :
                new ObjectParameter("TransactionCodeID", typeof(int));
    
            var oNRRTransactionCodeParameter = oNRRTransactionCode != null ?
                new ObjectParameter("ONRRTransactionCode", oNRRTransactionCode) :
                new ObjectParameter("ONRRTransactionCode", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var dispositionCodeParameter = dispositionCode != null ?
                new ObjectParameter("DispositionCode", dispositionCode) :
                new ObjectParameter("DispositionCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ONRRTransactionCodesUpdate", transactionCodeIDParameter, oNRRTransactionCodeParameter, productCodeParameter, dispositionCodeParameter);
        }
    
        public virtual int PaymentMethodsInsert(string paymentMethod, ObjectParameter newID)
        {
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaymentMethodsInsert", paymentMethodParameter, newID);
        }
    
        public virtual ObjectResult<PaymentMethodsSelect_Result> PaymentMethodsSelect(Nullable<int> paymentMethodID)
        {
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentMethodsSelect_Result>("PaymentMethodsSelect", paymentMethodIDParameter);
        }
    
        public virtual ObjectResult<PaymentMethodsSelectAll_Result> PaymentMethodsSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentMethodsSelectAll_Result>("PaymentMethodsSelectAll");
        }
    
        public virtual int PaymentMethodsUpdate(Nullable<int> paymentMethodID, string paymentMethod)
        {
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaymentMethodsUpdate", paymentMethodIDParameter, paymentMethodParameter);
        }
    
        public virtual int PayorCodesInsert(string payorCode, string payor, ObjectParameter newID)
        {
            var payorCodeParameter = payorCode != null ?
                new ObjectParameter("PayorCode", payorCode) :
                new ObjectParameter("PayorCode", typeof(string));
    
            var payorParameter = payor != null ?
                new ObjectParameter("Payor", payor) :
                new ObjectParameter("Payor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayorCodesInsert", payorCodeParameter, payorParameter, newID);
        }
    
        public virtual ObjectResult<PayorCodesSelect_Result> PayorCodesSelect(Nullable<int> payorCodeID)
        {
            var payorCodeIDParameter = payorCodeID.HasValue ?
                new ObjectParameter("PayorCodeID", payorCodeID) :
                new ObjectParameter("PayorCodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayorCodesSelect_Result>("PayorCodesSelect", payorCodeIDParameter);
        }
    
        public virtual ObjectResult<PayorCodesSelectAll_Result> PayorCodesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayorCodesSelectAll_Result>("PayorCodesSelectAll");
        }
    
        public virtual int PayorCodesUpdate(Nullable<int> payorCodeID, string payorCode, string payor)
        {
            var payorCodeIDParameter = payorCodeID.HasValue ?
                new ObjectParameter("PayorCodeID", payorCodeID) :
                new ObjectParameter("PayorCodeID", typeof(int));
    
            var payorCodeParameter = payorCode != null ?
                new ObjectParameter("PayorCode", payorCode) :
                new ObjectParameter("PayorCode", typeof(string));
    
            var payorParameter = payor != null ?
                new ObjectParameter("Payor", payor) :
                new ObjectParameter("Payor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayorCodesUpdate", payorCodeIDParameter, payorCodeParameter, payorParameter);
        }
    
        public virtual int ProductCodeCrossReferenceInsert(string oNRRProductCode, string qRAMajorProductCode, ObjectParameter newID)
        {
            var oNRRProductCodeParameter = oNRRProductCode != null ?
                new ObjectParameter("ONRRProductCode", oNRRProductCode) :
                new ObjectParameter("ONRRProductCode", typeof(string));
    
            var qRAMajorProductCodeParameter = qRAMajorProductCode != null ?
                new ObjectParameter("QRAMajorProductCode", qRAMajorProductCode) :
                new ObjectParameter("QRAMajorProductCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductCodeCrossReferenceInsert", oNRRProductCodeParameter, qRAMajorProductCodeParameter, newID);
        }
    
        public virtual ObjectResult<ProductCodeCrossReferenceSelect_Result> ProductCodeCrossReferenceSelect(Nullable<int> productCodeID)
        {
            var productCodeIDParameter = productCodeID.HasValue ?
                new ObjectParameter("ProductCodeID", productCodeID) :
                new ObjectParameter("ProductCodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductCodeCrossReferenceSelect_Result>("ProductCodeCrossReferenceSelect", productCodeIDParameter);
        }
    
        public virtual ObjectResult<ProductCodeCrossReferenceSelectAll_Result> ProductCodeCrossReferenceSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductCodeCrossReferenceSelectAll_Result>("ProductCodeCrossReferenceSelectAll");
        }
    
        public virtual int ProductCodeCrossReferenceUpdate(Nullable<int> productCodeID, string oNRRProductCode, string qRAMajorProductCode)
        {
            var productCodeIDParameter = productCodeID.HasValue ?
                new ObjectParameter("ProductCodeID", productCodeID) :
                new ObjectParameter("ProductCodeID", typeof(int));
    
            var oNRRProductCodeParameter = oNRRProductCode != null ?
                new ObjectParameter("ONRRProductCode", oNRRProductCode) :
                new ObjectParameter("ONRRProductCode", typeof(string));
    
            var qRAMajorProductCodeParameter = qRAMajorProductCode != null ?
                new ObjectParameter("QRAMajorProductCode", qRAMajorProductCode) :
                new ObjectParameter("QRAMajorProductCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductCodeCrossReferenceUpdate", productCodeIDParameter, oNRRProductCodeParameter, qRAMajorProductCodeParameter);
        }
    
        public virtual int RevenueDeductionsInsert(string adjustmentCategoryCode, string adjustmentCategory, Nullable<bool> landExemptFlag, Nullable<bool> mMSTransportationDeductFlag, Nullable<bool> nMEXTransportationDeductFlag, Nullable<bool> mMSProcessingAllowanceFlag, Nullable<bool> nMEXProcessingAllowanceFlag, Nullable<int> allocationOrder, ObjectParameter newID)
        {
            var adjustmentCategoryCodeParameter = adjustmentCategoryCode != null ?
                new ObjectParameter("AdjustmentCategoryCode", adjustmentCategoryCode) :
                new ObjectParameter("AdjustmentCategoryCode", typeof(string));
    
            var adjustmentCategoryParameter = adjustmentCategory != null ?
                new ObjectParameter("AdjustmentCategory", adjustmentCategory) :
                new ObjectParameter("AdjustmentCategory", typeof(string));
    
            var landExemptFlagParameter = landExemptFlag.HasValue ?
                new ObjectParameter("LandExemptFlag", landExemptFlag) :
                new ObjectParameter("LandExemptFlag", typeof(bool));
    
            var mMSTransportationDeductFlagParameter = mMSTransportationDeductFlag.HasValue ?
                new ObjectParameter("MMSTransportationDeductFlag", mMSTransportationDeductFlag) :
                new ObjectParameter("MMSTransportationDeductFlag", typeof(bool));
    
            var nMEXTransportationDeductFlagParameter = nMEXTransportationDeductFlag.HasValue ?
                new ObjectParameter("NMEXTransportationDeductFlag", nMEXTransportationDeductFlag) :
                new ObjectParameter("NMEXTransportationDeductFlag", typeof(bool));
    
            var mMSProcessingAllowanceFlagParameter = mMSProcessingAllowanceFlag.HasValue ?
                new ObjectParameter("MMSProcessingAllowanceFlag", mMSProcessingAllowanceFlag) :
                new ObjectParameter("MMSProcessingAllowanceFlag", typeof(bool));
    
            var nMEXProcessingAllowanceFlagParameter = nMEXProcessingAllowanceFlag.HasValue ?
                new ObjectParameter("NMEXProcessingAllowanceFlag", nMEXProcessingAllowanceFlag) :
                new ObjectParameter("NMEXProcessingAllowanceFlag", typeof(bool));
    
            var allocationOrderParameter = allocationOrder.HasValue ?
                new ObjectParameter("AllocationOrder", allocationOrder) :
                new ObjectParameter("AllocationOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RevenueDeductionsInsert", adjustmentCategoryCodeParameter, adjustmentCategoryParameter, landExemptFlagParameter, mMSTransportationDeductFlagParameter, nMEXTransportationDeductFlagParameter, mMSProcessingAllowanceFlagParameter, nMEXProcessingAllowanceFlagParameter, allocationOrderParameter, newID);
        }
    
        public virtual ObjectResult<RevenueDeductionsSelect_Result> RevenueDeductionsSelect(Nullable<int> revenueDeductionID)
        {
            var revenueDeductionIDParameter = revenueDeductionID.HasValue ?
                new ObjectParameter("RevenueDeductionID", revenueDeductionID) :
                new ObjectParameter("RevenueDeductionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RevenueDeductionsSelect_Result>("RevenueDeductionsSelect", revenueDeductionIDParameter);
        }
    
        public virtual ObjectResult<RevenueDeductionsSelectAll_Result> RevenueDeductionsSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RevenueDeductionsSelectAll_Result>("RevenueDeductionsSelectAll");
        }
    
        public virtual int RevenueDeductionsUpdate(Nullable<int> revenueDeductionID, string adjustmentCategoryCode, string adjustmentCategory, Nullable<bool> landExemptFlag, Nullable<bool> mMSTransportationDeductFlag, Nullable<bool> nMEXTransportationDeductFlag, Nullable<bool> mMSProcessingAllowanceFlag, Nullable<bool> nMEXProcessingAllowanceFlag, Nullable<int> allocationOrder)
        {
            var revenueDeductionIDParameter = revenueDeductionID.HasValue ?
                new ObjectParameter("RevenueDeductionID", revenueDeductionID) :
                new ObjectParameter("RevenueDeductionID", typeof(int));
    
            var adjustmentCategoryCodeParameter = adjustmentCategoryCode != null ?
                new ObjectParameter("AdjustmentCategoryCode", adjustmentCategoryCode) :
                new ObjectParameter("AdjustmentCategoryCode", typeof(string));
    
            var adjustmentCategoryParameter = adjustmentCategory != null ?
                new ObjectParameter("AdjustmentCategory", adjustmentCategory) :
                new ObjectParameter("AdjustmentCategory", typeof(string));
    
            var landExemptFlagParameter = landExemptFlag.HasValue ?
                new ObjectParameter("LandExemptFlag", landExemptFlag) :
                new ObjectParameter("LandExemptFlag", typeof(bool));
    
            var mMSTransportationDeductFlagParameter = mMSTransportationDeductFlag.HasValue ?
                new ObjectParameter("MMSTransportationDeductFlag", mMSTransportationDeductFlag) :
                new ObjectParameter("MMSTransportationDeductFlag", typeof(bool));
    
            var nMEXTransportationDeductFlagParameter = nMEXTransportationDeductFlag.HasValue ?
                new ObjectParameter("NMEXTransportationDeductFlag", nMEXTransportationDeductFlag) :
                new ObjectParameter("NMEXTransportationDeductFlag", typeof(bool));
    
            var mMSProcessingAllowanceFlagParameter = mMSProcessingAllowanceFlag.HasValue ?
                new ObjectParameter("MMSProcessingAllowanceFlag", mMSProcessingAllowanceFlag) :
                new ObjectParameter("MMSProcessingAllowanceFlag", typeof(bool));
    
            var nMEXProcessingAllowanceFlagParameter = nMEXProcessingAllowanceFlag.HasValue ?
                new ObjectParameter("NMEXProcessingAllowanceFlag", nMEXProcessingAllowanceFlag) :
                new ObjectParameter("NMEXProcessingAllowanceFlag", typeof(bool));
    
            var allocationOrderParameter = allocationOrder.HasValue ?
                new ObjectParameter("AllocationOrder", allocationOrder) :
                new ObjectParameter("AllocationOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RevenueDeductionsUpdate", revenueDeductionIDParameter, adjustmentCategoryCodeParameter, adjustmentCategoryParameter, landExemptFlagParameter, mMSTransportationDeductFlagParameter, nMEXTransportationDeductFlagParameter, mMSProcessingAllowanceFlagParameter, nMEXProcessingAllowanceFlagParameter, allocationOrderParameter);
        }
    
        public virtual int SalesTypesInsert(string salesType, ObjectParameter newID)
        {
            var salesTypeParameter = salesType != null ?
                new ObjectParameter("SalesType", salesType) :
                new ObjectParameter("SalesType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesTypesInsert", salesTypeParameter, newID);
        }
    
        public virtual ObjectResult<SalesTypesSelect_Result> SalesTypesSelect(Nullable<int> salesTypeID)
        {
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesTypesSelect_Result>("SalesTypesSelect", salesTypeIDParameter);
        }
    
        public virtual ObjectResult<SalesTypesSelectAll_Result> SalesTypesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesTypesSelectAll_Result>("SalesTypesSelectAll");
        }
    
        public virtual int SalesTypesUpdate(Nullable<int> salesTypeID, string salesType)
        {
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var salesTypeParameter = salesType != null ?
                new ObjectParameter("SalesType", salesType) :
                new ObjectParameter("SalesType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesTypesUpdate", salesTypeIDParameter, salesTypeParameter);
        }
    
        public virtual int StatesInsert(string state, string stateCode, Nullable<decimal> pressureBase, ObjectParameter newID)
        {
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var pressureBaseParameter = pressureBase.HasValue ?
                new ObjectParameter("PressureBase", pressureBase) :
                new ObjectParameter("PressureBase", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StatesInsert", stateParameter, stateCodeParameter, pressureBaseParameter, newID);
        }
    
        public virtual ObjectResult<StatesSelect_Result> StatesSelect(string stateCode)
        {
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StatesSelect_Result>("StatesSelect", stateCodeParameter);
        }
    
        public virtual int StatesUpdate(string stateCode, string state, Nullable<decimal> pressureBase)
        {
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var pressureBaseParameter = pressureBase.HasValue ?
                new ObjectParameter("PressureBase", pressureBase) :
                new ObjectParameter("PressureBase", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StatesUpdate", stateCodeParameter, stateParameter, pressureBaseParameter);
        }
    
        public virtual int WellCompletionsInsert(string propertyNumber, Nullable<decimal> wellAcreage, string wellCompletionName, string stateCode, string aPI, string company, string propertyName, Nullable<decimal> grossMarketedInterest, ObjectParameter newID)
        {
            var propertyNumberParameter = propertyNumber != null ?
                new ObjectParameter("PropertyNumber", propertyNumber) :
                new ObjectParameter("PropertyNumber", typeof(string));
    
            var wellAcreageParameter = wellAcreage.HasValue ?
                new ObjectParameter("WellAcreage", wellAcreage) :
                new ObjectParameter("WellAcreage", typeof(decimal));
    
            var wellCompletionNameParameter = wellCompletionName != null ?
                new ObjectParameter("WellCompletionName", wellCompletionName) :
                new ObjectParameter("WellCompletionName", typeof(string));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var aPIParameter = aPI != null ?
                new ObjectParameter("API", aPI) :
                new ObjectParameter("API", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var grossMarketedInterestParameter = grossMarketedInterest.HasValue ?
                new ObjectParameter("GrossMarketedInterest", grossMarketedInterest) :
                new ObjectParameter("GrossMarketedInterest", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WellCompletionsInsert", propertyNumberParameter, wellAcreageParameter, wellCompletionNameParameter, stateCodeParameter, aPIParameter, companyParameter, propertyNameParameter, grossMarketedInterestParameter, newID);
        }
    
        public virtual ObjectResult<WellCompletionsSelect_Result> WellCompletionsSelect(string wellCompletionID)
        {
            var wellCompletionIDParameter = wellCompletionID != null ?
                new ObjectParameter("WellCompletionID", wellCompletionID) :
                new ObjectParameter("WellCompletionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WellCompletionsSelect_Result>("WellCompletionsSelect", wellCompletionIDParameter);
        }
    
        public virtual ObjectResult<WellCompletionsSelectAll_Result> WellCompletionsSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WellCompletionsSelectAll_Result>("WellCompletionsSelectAll");
        }
    
        public virtual int WellCompletionsUpdate(string wellCompletionID, string propertyNumber, Nullable<decimal> wellAcreage, string wellCompletionName, string stateCode, string aPI, string company, string propertyName, Nullable<decimal> grossMarketedInterest)
        {
            var wellCompletionIDParameter = wellCompletionID != null ?
                new ObjectParameter("WellCompletionID", wellCompletionID) :
                new ObjectParameter("WellCompletionID", typeof(string));
    
            var propertyNumberParameter = propertyNumber != null ?
                new ObjectParameter("PropertyNumber", propertyNumber) :
                new ObjectParameter("PropertyNumber", typeof(string));
    
            var wellAcreageParameter = wellAcreage.HasValue ?
                new ObjectParameter("WellAcreage", wellAcreage) :
                new ObjectParameter("WellAcreage", typeof(decimal));
    
            var wellCompletionNameParameter = wellCompletionName != null ?
                new ObjectParameter("WellCompletionName", wellCompletionName) :
                new ObjectParameter("WellCompletionName", typeof(string));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var aPIParameter = aPI != null ?
                new ObjectParameter("API", aPI) :
                new ObjectParameter("API", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var grossMarketedInterestParameter = grossMarketedInterest.HasValue ?
                new ObjectParameter("GrossMarketedInterest", grossMarketedInterest) :
                new ObjectParameter("GrossMarketedInterest", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WellCompletionsUpdate", wellCompletionIDParameter, propertyNumberParameter, wellAcreageParameter, wellCompletionNameParameter, stateCodeParameter, aPIParameter, companyParameter, propertyNameParameter, grossMarketedInterestParameter);
        }
    
        public virtual int WellLeaseAgreementsInsert(string wellCompletionID, Nullable<int> leaseAgreementID, Nullable<int> productCodeID, Nullable<int> salesTypeID, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo, ObjectParameter newID)
        {
            var wellCompletionIDParameter = wellCompletionID != null ?
                new ObjectParameter("WellCompletionID", wellCompletionID) :
                new ObjectParameter("WellCompletionID", typeof(string));
    
            var leaseAgreementIDParameter = leaseAgreementID.HasValue ?
                new ObjectParameter("LeaseAgreementID", leaseAgreementID) :
                new ObjectParameter("LeaseAgreementID", typeof(int));
    
            var productCodeIDParameter = productCodeID.HasValue ?
                new ObjectParameter("ProductCodeID", productCodeID) :
                new ObjectParameter("ProductCodeID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WellLeaseAgreementsInsert", wellCompletionIDParameter, leaseAgreementIDParameter, productCodeIDParameter, salesTypeIDParameter, effectiveFromParameter, effectiveToParameter, newID);
        }
    
        public virtual ObjectResult<WellLeaseAgreementsSelect_Result> WellLeaseAgreementsSelect(Nullable<int> wellLeaseAgreementID)
        {
            var wellLeaseAgreementIDParameter = wellLeaseAgreementID.HasValue ?
                new ObjectParameter("WellLeaseAgreementID", wellLeaseAgreementID) :
                new ObjectParameter("WellLeaseAgreementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WellLeaseAgreementsSelect_Result>("WellLeaseAgreementsSelect", wellLeaseAgreementIDParameter);
        }
    
        public virtual ObjectResult<WellLeaseAgreementsSelectAll_Result> WellLeaseAgreementsSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WellLeaseAgreementsSelectAll_Result>("WellLeaseAgreementsSelectAll");
        }
    
        public virtual int WellLeaseAgreementsUpdate(Nullable<int> wellLeaseAgreementID, string wellCompletionID, Nullable<int> leaseAgreementID, Nullable<int> productCodeID, Nullable<int> salesTypeID, Nullable<System.DateTime> effectiveFrom, Nullable<System.DateTime> effectiveTo)
        {
            var wellLeaseAgreementIDParameter = wellLeaseAgreementID.HasValue ?
                new ObjectParameter("WellLeaseAgreementID", wellLeaseAgreementID) :
                new ObjectParameter("WellLeaseAgreementID", typeof(int));
    
            var wellCompletionIDParameter = wellCompletionID != null ?
                new ObjectParameter("WellCompletionID", wellCompletionID) :
                new ObjectParameter("WellCompletionID", typeof(string));
    
            var leaseAgreementIDParameter = leaseAgreementID.HasValue ?
                new ObjectParameter("LeaseAgreementID", leaseAgreementID) :
                new ObjectParameter("LeaseAgreementID", typeof(int));
    
            var productCodeIDParameter = productCodeID.HasValue ?
                new ObjectParameter("ProductCodeID", productCodeID) :
                new ObjectParameter("ProductCodeID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var effectiveFromParameter = effectiveFrom.HasValue ?
                new ObjectParameter("EffectiveFrom", effectiveFrom) :
                new ObjectParameter("EffectiveFrom", typeof(System.DateTime));
    
            var effectiveToParameter = effectiveTo.HasValue ?
                new ObjectParameter("EffectiveTo", effectiveTo) :
                new ObjectParameter("EffectiveTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WellLeaseAgreementsUpdate", wellLeaseAgreementIDParameter, wellCompletionIDParameter, leaseAgreementIDParameter, productCodeIDParameter, salesTypeIDParameter, effectiveFromParameter, effectiveToParameter);
        }
    
        public virtual ObjectResult<AgreementLeaseSelect_Result> AgreementLeaseSelect(Nullable<int> agreementID)
        {
            var agreementIDParameter = agreementID.HasValue ?
                new ObjectParameter("AgreementID", agreementID) :
                new ObjectParameter("AgreementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgreementLeaseSelect_Result>("AgreementLeaseSelect", agreementIDParameter);
        }
    
        public virtual ObjectResult<WellLeaseAgreementSelectByWell_Result> WellLeaseAgreementSelectByWell(string wellCompletionID)
        {
            var wellCompletionIDParameter = wellCompletionID != null ?
                new ObjectParameter("WellCompletionID", wellCompletionID) :
                new ObjectParameter("WellCompletionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WellLeaseAgreementSelectByWell_Result>("WellLeaseAgreementSelectByWell", wellCompletionIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> AccountingMonthCurrentSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("AccountingMonthCurrentSelect");
        }
    
        public virtual ObjectResult<ONRRDetailSelectByAggregate_Result> ONRRDetailSelectByAggregate(Nullable<int> aggregateID)
        {
            var aggregateIDParameter = aggregateID.HasValue ?
                new ObjectParameter("AggregateID", aggregateID) :
                new ObjectParameter("AggregateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ONRRDetailSelectByAggregate_Result>("ONRRDetailSelectByAggregate", aggregateIDParameter);
        }
    
        public virtual ObjectResult<ONRRDetailSelectFiltered_Result> ONRRDetailSelectFiltered(string stateCode)
        {
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ONRRDetailSelectFiltered_Result>("ONRRDetailSelectFiltered", stateCodeParameter);
        }
    }
}
